osTvType = 0x80000300; // (initialize, false)
osRomBase = 0x80000308; // (pirawdma, false)
osResetType = 0x8000030C; // (initialize, false)
osAppNMIBuffer = 0x8000031C; // (initialize, false)
osSetIntMask = 0x80091110; // (sched, false)
osCreatePiManager = 0x800911B0; // size:0x234 (pimgr, true)
ramromMain = 0x800913E4; // size:0x10C (pimgr, true)
__osEPiRawStartDma = 0x800914F0; // size:0x3E0 (epirawdma, true)
osEPiStartDma = 0x800919F0; // size:0x23C (epidma, true)
osEPiLinkHandle = 0x80091C30; // size:0x5C (epilinkhandle, true)
osCartRomInit = 0x80091C90; // size:0x1F0 (cartrominit, true)
__osDevMgrMain = 0x80091E80; // size:0x540 (devmgr, true)
__osPiCreateAccessQueue = 0x800923C0; // (pimgr, false)
__osPiGetAccess = 0x8009241C; // (cartrominit, false)
__osPiRelAccess = 0x8009246C; // (cartrominit, false)
osPiStartDma = 0x800924B0; // size:0x240 (pidma, true)
osAiGetLength = 0x800926F0; // size:0x28 (aigetlen, true)
osAiGetStatus = 0x80092720; // size:0x28 (aigetstat, true)
osAiSetFrequency = 0x80092750; // size:0x2B0 (aisetfreq, true)
osAiSetNextBuffer = 0x80092A00; // size:0x108 (aisetnextbuf, true)
_init_lpfilter = 0x80092B10; // size:0x16C (drvrnew, true)
alFxNew = 0x80092C7C; // size:0x5FC (drvrnew, true)
alEnvmixerNew = 0x80093278; // size:0x128 (drvrnew, true)
alLoadNew = 0x800933A0; // size:0xD4 (drvrnew, true)
alResampleNew = 0x80093474; // size:0xB8 (drvrnew, true)
alAuxBusNew = 0x8009352C; // size:0x6C (drvrnew, true)
alMainBusNew = 0x80093598; // size:0x6C (drvrnew, true)
alSaveNew = 0x80093604; // size:0x58 (drvrnew, true)
alAdpcmPull = 0x80093660; // size:0x744 (load, true)
alRaw16Pull = 0x80093DA4; // size:0x6B0 (load, true)
// = 0x8009436B; // (load, false)
alLoadParam = 0x80094454; // size:0x370 (load, true)
_decodeChunk = 0x800947C4; // size:0x214 (load, true)
alAuxBusPull = 0x800949E0; // size:0x140 (auxbus, true)
alAuxBusParam = 0x80094B20; // size:0x90 (auxbus, true)
alEnvmixerPull = 0x80094BB0; // size:0x87C (env, true)
// = 0x80095354; // (env, false)
alEnvmixerParam = 0x8009542C; // size:0x1B4 (env, true)
_pullSubFrame = 0x800955E0; // size:0x4B8 (env, true)
// = 0x800956DE; // (env, false)
// = 0x800957E6; // (env, false)
// = 0x8009582B; // (env, false)
// = 0x80095A35; // (env, false)
_frexpf = 0x80095A98; // size:0x160 (env, true)
_ldexpf = 0x80095BF8; // size:0x5C (env, true)
_getRate = 0x80095C54; // size:0x2B8 (env, true)
_getVol = 0x80095F0C; // size:0x138 (env, true)
alFilterNew = 0x80096050; // size:0x68 (filter, true)
alMainBusPull = 0x800960C0; // size:0x1D0 (mainbus, true)
alMainBusParam = 0x80096290; // size:0x90 (mainbus, true)
alResamplePull = 0x80096320; // size:0x2DC (resample, true)
alResampleParam = 0x800965FC; // size:0x188 (resample, true)
alFxPull = 0x80096790; // size:0x5A0 (reverb, true)
alFxParam = 0x80096D30; // size:0x54 (reverb, true)
alFxParamHdl = 0x80096D84; // size:0x35C (reverb, true)
// = 0x80096E8C; // (reverb, false)
// = 0x800970D2; // (reverb, false)
_loadOutputBuffer = 0x800970E0; // size:0x308 (reverb, true)
// = 0x800972D0; // (reverb, false)
_loadBuffer = 0x800973E8; // size:0x2A8 (reverb, true)
// = 0x800974AD; // (reverb, false)
// = 0x80097588; // (reverb, false)
_saveBuffer = 0x80097690; // size:0x27C (reverb, true)
_filterBuffer = 0x8009790C; // size:0x124 (reverb, true)
_doModFunc = 0x80097A30; // size:0x108 (reverb, true)
alSavePull = 0x80097B40; // size:0x168 (save, true)
alSaveParam = 0x80097CA8; // size:0x94 (save, true)
alInit = 0x80097D40; // size:0x58 (sl, true)
alClose = 0x80097D98; // size:0x48 (sl, true)
alLink = 0x80097DE0; // size:0x6C (sl, true)
alUnlink = 0x80097E4C; // size:0x68 (sl, true)
alHeapInit = 0x80097EC0; // size:0x94 (heapinit, true)
alHeapDBAlloc = 0x80097F60; // size:0x168 (heapalloc, true)
alCopy = 0x800980D0; // size:0x8C (copy, true)
alSynNew = 0x80098160; // size:0x444 (synthesizer, true)
alAudioFrame = 0x800985A4; // size:0x258 (synthesizer, true)
// = 0x800986DC; // (synthesizer, false)
// = 0x80098763; // (synthesizer, false)
// = 0x800987F3; // (synthesizer, false)
__allocParam = 0x800987FC; // size:0x6C (synthesizer, true)
__freeParam = 0x80098868; // size:0x48 (synthesizer, true)
_collectPVoices = 0x800988B0; // size:0x6C (synthesizer, true)
_freePVoice = 0x8009891C; // size:0x48 (synthesizer, true)
_timeToSamplesNoRound = 0x80098964; // size:0x78 (synthesizer, true)
_timeToSamples = 0x800989DC; // size:0x48 (synthesizer, true)
__nextSampleTime = 0x80098A24; // size:0xF8 (synthesizer, true)
alSynDelete = 0x80098B20; // size:0x28 (syndelete, true)
alSynAddPlayer = 0x80098B50; // size:0x6C (synaddplayer, true)
alSynRemovePlayer = 0x80098BC0; // size:0xD8 (synremoveplayer, true)
alSynFreeVoice = 0x80098CA0; // size:0xFC (synfreevoice, true)
alSynAllocVoice = 0x80098DA0; // size:0x22C (synallocvoice, true)
// = 0x80098F41; // (synallocvoice, false)
_allocatePVoice = 0x80098FCC; // size:0x150 (synallocvoice, true)
alSynStopVoice = 0x80099120; // size:0xC4 (synstopvoice, true)
alSynStartVoice = 0x800991F0; // size:0xE4 (synstartvoice, true)
alSynSetPitch = 0x800992E0; // size:0xD4 (synsetpitch, true)
alSynSetVol = 0x800993C0; // size:0xF8 (synsetvol, true)
alSynSetFXMix = 0x800994C0; // size:0xF8 (synsetfxmix, true)
alSynSetPan = 0x800995C0; // size:0xE0 (synsetpan, true)
alSynAllocFX = 0x800996A0; // size:0x154 (synallocfx, true)
osInvalDCache = 0x80099800; // (sirawdma, false)
osWritebackDCache = 0x800998B0; // (initialize, false)
osWritebackDCacheAll = 0x80099930; // (sched, false)
osContStartQuery = 0x80099960; // size:0x94 (contquery, true)
osContGetQuery = 0x800999F4; // size:0x34 (contquery, true)
osContStartReadData = 0x80099A30; // size:0x9C (contreaddata, true)
osContGetReadData = 0x80099ACC; // size:0xFC (contreaddata, true)
// = 0x80099B62; // (contreaddata, false)
__osPackReadData = 0x80099BC8; // size:0x134 (contreaddata, true)
osContReset = 0x80099D00; // size:0x10C (contreset, true)
// = 0x80099DC9; // (contreset, false)
__osPackResetData = 0x80099E0C; // size:0x84 (contreset, true)
osContInit = 0x80099E90; // size:0x1BC (controller, true)
// = 0x80099FDD; // (controller, false)
__osContGetInitData = 0x8009A04C; // size:0x128 (controller, true)
// = 0x8009A0BB; // (controller, false)
__osPackRequestData = 0x8009A174; // size:0x144 (controller, true)
osContSetCh = 0x8009A2C0; // size:0x80 (contsetch, true)
osVirtualToPhysical = 0x8009A340; // size:0xDC (virtualtophysical, true)
__assert = 0x8009A420; // size:0x48 (assert, true)
guLookAtF = 0x8009A470; // size:0x41C (lookat, true)
guLookAt = 0x8009A88C; // size:0x84 (lookat, true)
guMtxF2L = 0x8009A910; // size:0x170 (mtxutil, true)
guMtxL2F = 0x8009AA80; // size:0x188 (mtxutil, true)
// = 0x8009AB4A; // (mtxutil, false)
guMtxIdentF = 0x8009AC08; // size:0xEC (mtxutil, true)
guMtxIdent = 0x8009ACF4; // size:0x3C (mtxutil, true)
guPerspectiveF = 0x8009AD30; // size:0x2C0 (perspective, true)
guPerspective = 0x8009AFF0; // size:0x6C (perspective, true)
guRotateF = 0x8009B060; // size:0x24C (rotate, true)
guRotate = 0x8009B2AC; // size:0x5C (rotate, true)
__sinf = 0x8009B310; // size:0x2AC (sinf, true)
sinf = 0x8009B310; // (perspective, false)
guTranslateF = 0x8009B5C0; // size:0x6C (translate, true)
guTranslate = 0x8009B62C; // size:0x54 (translate, true)
guS2DInitBg = 0x8009B680; // size:0x214 (us2dex, true)
guS2DEmuSetScissor = 0x8009B8A0; // size:0x84 (us2dex_emu, true)
// = 0x8009B903; // (us2dex_emu, false)
tmemLoad_B = 0x8009B924; // size:0xFC (us2dex_emu, true)
// = 0x8009B9C0; // (us2dex_emu, false)
tmemLoad_A = 0x8009BA20; // size:0xEC (us2dex_emu, true)
// = 0x8009BA71; // (us2dex_emu, false)
tmemLoad = 0x8009BB0C; // size:0x498 (us2dex_emu, true)
guS2DEmuBgRect1Cyc = 0x8009BFA4; // size:0xD90 (us2dex_emu, true)
__osRdbSend = 0x8009CD40; // size:0x2E4 (rdbsend, true)
osInitRdb = 0x8009D030; // size:0xAC (initrdb, true)
bcopy = 0x8009D0E0; // (sptask, false)
bzero = 0x8009D400; // (cartrominit, false)
strchr = 0x8009D4A0; // size:0x7C (string, true)
strlen = 0x8009D51C; // size:0x68 (string, true)
memcpy = 0x8009D584; // size:0x98 (string, true)
sprintf = 0x8009D620; // size:0x80 (sprintf, true)
proutSprintf = 0x8009D6A0; // size:0x50 (sprintf, true)
proutSyncPrintf = 0x8009D6F0; // size:0x90 (syncprintf, true)
// = 0x8009D75C; // (syncprintf, false)
rmonPutchar = 0x8009D780; // size:0x88 (syncprintf, true)
kmc_proutSyncPrintf = 0x8009D808; // size:0x258 (syncprintf, true)
osSyncPrintf = 0x8009DA60; // size:0x8C (syncprintf, true)
rmonPrintf = 0x8009DAEC; // size:0x6C (syncprintf, true)
osCreateMesgQueue = 0x8009DB60; // size:0x9C (createmesgqueue, true)
osJamMesg = 0x8009DC00; // size:0x1B4 (jammesg, true)
osRecvMesg = 0x8009DDC0; // size:0x1A8 (recvmesg, true)
osSendMesg = 0x8009DF70; // size:0x1AC (sendmesg, true)
osSetEventMesg = 0x8009E120; // size:0xF4 (seteventmesg, true)
osGetCount = 0x8009E220; // (gettime, false)
_VirtualToPhysicalTask = 0x8009E230; // size:0x148 (sptask, true)
osSpTaskLoad = 0x8009E378; // size:0x28C (sptask, true)
osSpTaskStartGo = 0x8009E604; // size:0x50 (sptask, true)
osCreateScheduler = 0x8009E660; // size:0x1C4 (sched, true)
osScAddClient = 0x8009E824; // size:0x6C (sched, true)
osScRemoveClient = 0x8009E890; // size:0xC4 (sched, true)
osScGetCmdQ = 0x8009E954; // size:0x30 (sched, true)
__scMain = 0x8009E984; // size:0x138 (sched, true)
// = 0x8009E9A5; // (sched, false)
__scHandleRetrace = 0x8009EABC; // size:0x180 (sched, true)
// = 0x8009EAC5; // (sched, false)
__scHandleRSP = 0x8009EC3C; // size:0x204 (sched, true)
// = 0x8009EC48; // (sched, false)
// = 0x8009ED41; // (sched, false)
// = 0x8009ED98; // (sched, false)
__scHandleRDP = 0x8009EE40; // size:0x14C (sched, true)
// = 0x8009EEA0; // (sched, false)
// = 0x8009EF87; // (sched, false)
__scTaskReady = 0x8009EF8C; // size:0x74 (sched, true)
__scTaskComplete = 0x8009F000; // size:0x160 (sched, true)
// = 0x8009F0CB; // (sched, false)
// = 0x8009F119; // (sched, false)
__scAppendList = 0x8009F160; // size:0x134 (sched, true)
__scExec = 0x8009F294; // size:0x1B0 (sched, true)
__scYield = 0x8009F444; // size:0x68 (sched, true)
__scSchedule = 0x8009F4AC; // size:0x38C (sched, true)
__osSiRawStartDma = 0x8009F840; // size:0xF4 (sirawdma, true)
__osSiCreateAccessQueue = 0x8009F940; // (controller, false)
__osSiGetAccess = 0x8009F99C; // (contquery, false)
__osSiRelAccess = 0x8009F9EC; // (contquery, false)
osCreateThread = 0x8009FA30; // size:0x1C8 (createthread, true)
osDestroyThread = 0x8009FC00; // size:0x120 (destroythread, true)
osGetThreadPri = 0x8009FD20; // size:0x44 (getthreadpri, true)
osSetThreadPri = 0x8009FD70; // size:0x144 (setthreadpri, true)
osStartThread = 0x8009FEC0; // size:0x19C (startthread, true)
osStopThread = 0x800A0060; // size:0xEC (stopthread, true)
__osDequeueThread = 0x800A0150; // size:0x60 (thread, true)
osYieldThread = 0x800A01B0; // size:0x58 (yieldthread, true)
osGetTime = 0x800A0210; // size:0xD8 (gettime, true)
osSetTimer = 0x800A02F0; // size:0x100 (settimer, true)
__osTimerServicesInit = 0x800A03F0; // size:0xAC (timerintr, true)
__osTimerInterrupt = 0x800A049C; // size:0x328 (timerintr, true)
// = 0x800A06CF; // (timerintr, false)
// = 0x800A072F; // (timerintr, false)
__osSetTimerIntr = 0x800A07C4; // size:0x80 (timerintr, true)
__osInsertTimer = 0x800A0844; // size:0x1A4 (timerintr, true)
__osProbeTLB = 0x800A09F0; // (virtualtophysical, false)
osViGetCurrentFramebuffer = 0x800A0AB0; // (sched, false)
osViGetNextFramebuffer = 0x800A0B30; // (sched, false)
osViGetCurrentLine = 0x800A0BB0; // size:0x28 (vigetline, true)
osCreateViManager = 0x800A0BE0; // size:0x214 (vimgr, true)
viMgrMain = 0x800A0DF4; // size:0x208 (vimgr, true)
osViSetEvent = 0x800A1000; // size:0xCC (visetevent, true)
osViSetMode = 0x800A10D0; // size:0xD0 (visetmode, true)
osViSetSpecialFeatures = 0x800A11A0; // size:0x288 (visetspecial, true)
osViSwapBuffer = 0x800A1430; // size:0xE0 (viswapbuf, true)
__osViSwapContext = 0x800A1510; // size:0x370 (viswapcontext, true)
osViBlack = 0x800A1880; // size:0x94 (viblack, true)
osAfterPreNMI = 0x800A1980; // size:0x38 (afterprenmi, true)
osInitialize = 0x800A19C0; // size:0x4D4 (initialize, true)
// = 0x800A1D74; // (initialize, false)
ptstart = 0x800A1E94; // size:0x1C (initialize, true)
createSpeedParam = 0x800A1EB0; // size:0xB4 (initialize, true)
__osError = 0x800A1F70; // (aisetfreq, false)
__osDefaultHandler = 0x800A1FC0; // size:0x84 (error, true)
// proutSyncPrintf = 0x800A2050; // size:0x90 (kmcprintf, true)
// = 0x800A20BC; // (kmcprintf, false)
// rmonPutchar = 0x800A20E0; // size:0x88 (kmcprintf, true)
// kmc_proutSyncPrintf = 0x800A2168; // size:0x258 (kmcprintf, true)
kmcErrorHandler = 0x800A23C0; // size:0xD0 (kmcprintf, true)
// = 0x800A2490; // (exceptasm, false)
__osExceptionPreamble = 0x800A2490; // (initialize, false)
__ptExceptionPreamble = 0x800A24A0; // (initialize, false)
// = 0x800A2C1F; // (exceptasm, false)
// = 0x800A2D99; // (exceptasm, false)
// = 0x800A2DCF; // (exceptasm, false)
__osEnqueueAndYield = 0x800A2F94; // (jammesg, false)
__osEnqueueThread = 0x800A309C; // (setthreadpri, false)
__osPopThread = 0x800A30E4; // (jammesg, false)
__osDispatchThread = 0x800A30F4; // (destroythread, false)
__osCleanupThread = 0x800A3270; // (createthread, false)
__osDisableInt = 0x800A3280; // (cartrominit, false)
__osRestoreInt = 0x800A32F0; // (cartrominit, false)
__osSetGlobalIntMask = 0x800A3310; // size:0x58 (setglobalintmask, true)
__osResetGlobalIntMask = 0x800A3370; // size:0x64 (resetglobalintmask, true)
__osPiRawStartDma = 0x800A33E0; // size:0x1DC (pirawdma, true)
osPiGetCmdQueue = 0x800A35C0; // size:0x48 (pigetcmdq, true)
__osEPiRawReadIo = 0x800A3610; // size:0x2D4 (epirawread, true)
__osEPiRawWriteIo = 0x800A38F0; // size:0x2A4 (epirawwrite, true)
__osAiDeviceBusy = 0x800A3BA0; // size:0x4C (ai, true)
osInvalICache = 0x800A3BF0; // (initialize, false)
string_to_u32 = 0x800A3C70; // size:0x88 (kdebugserver, true)
// = 0x800A3CD6; // (kdebugserver, false)
send_packet = 0x800A3CF8; // size:0xC4 (kdebugserver, true)
// = 0x800A3D69; // (kdebugserver, false)
clear_IP6 = 0x800A3DBC; // size:0x78 (kdebugserver, true)
// = 0x800A3DC3; // (kdebugserver, false)
send = 0x800A3E34; // size:0xF0 (kdebugserver, true)
kdebugserver = 0x800A3F24; // size:0x11C (kdebugserver, true)
sqrtf = 0x800A4040; // (lookat, false)
__cosf = 0x800A4050; // size:0x238 (cosf, true)
cosf = 0x800A4050; // (perspective, false)
guNormalize = 0x800A4290; // size:0xD8 (normalize, true)
osReadHost = 0x800A4370; // size:0xE0 (readhost, true)
_Printf = 0x800A4450; // size:0x910 (xprintf, true)
// = 0x800A4B1C; // (xprintf, false)
_Putfld = 0x800A4D60; // size:0x8E4 (xprintf, true)
osCreateLog = 0x800A5650; // size:0x6C (log, true)
osLogEvent = 0x800A56BC; // size:0x8C (log, true)
osFlushLog = 0x800A5748; // size:0x218 (log, true)
// = 0x800A589C; // (log, false)
__osLogWrite = 0x800A5960; // size:0x1FC (log, true)
osDpSetNextBuffer = 0x800A5B60; // size:0x130 (dpsetnextbuf, true)
__osGetCause = 0x800A5C90; // (initialize, false)
__osGetSR = 0x800A5CA0; // (initialize, false)
__osSetCompare = 0x800A5CB0; // (timerintr, false)
__osSetFpcCsr = 0x800A5CC0; // (initialize, false)
__osSetSR = 0x800A5CD0; // (initialize, false)
__rmonSendFault = 0x800A5CE0; // size:0x88 (rmonsio, true)
__rmonIOflush = 0x800A5D68; // size:0x60 (rmonsio, true)
__rmonIOputw = 0x800A5DC8; // size:0x84 (rmonsio, true)
__rmonIOhandler = 0x800A5E4C; // size:0xE4 (rmonsio, true)
__osSpDeviceBusy = 0x800A5F30; // size:0x48 (sp, true)
__osSpSetStatus = 0x800A5F80; // size:0x2C (spsetstat, true)
__osSpSetPc = 0x800A5FB0; // size:0x50 (spsetpc, true)
__osSpRawStartDma = 0x800A6000; // size:0x130 (sprawdma, true)
osSpTaskYield = 0x800A6130; // size:0x2C (sptaskyield, true)
osSpTaskYielded = 0x800A6160; // size:0x88 (sptaskyielded, true)
__osSiRawReadIo = 0x800A61F0; // (initialize, false)
__osSiRawWriteIo = 0x800A62B0; // (initialize, false)
osMapTLBRdb = 0x800A6340; // (initialize, false)
osUnmapTLBAll = 0x800A63A0; // (initialize, false)
__osViInit = 0x800A63F0; // size:0x158 (vi, true)
__osViGetCurrentContext = 0x800A6550; // (vimgr, false)
_Litob = 0x800A6580; // size:0x3B0 (xlitob, true)
_Ldtob = 0x800A6930; // size:0x708 (xldtob, true)
// = 0x800A6E76; // (xldtob, false)
// = 0x800A6F6C; // (xldtob, false)
_Ldunscale = 0x800A7038; // size:0x148 (xldtob, true)
_Genld = 0x800A7180; // size:0x924 (xldtob, true)
__osDpDeviceBusy = 0x800A7AB0; // size:0x48 (dp, true)
NotImplemented = 0x800A7B00; // size:0x28 (rmoncmds, true)
__rmonExecute = 0x800A7B28; // size:0xAC (rmoncmds, true)
__rmonWriteWordTo = 0x800A7BE0; // size:0x50 (rmonmem, true)
// = 0x800A7C1C; // (rmonmem, false)
__rmonReadWordAt = 0x800A7C30; // size:0x74 (rmonmem, true)
// = 0x800A7C73; // (rmonmem, false)
__rmonMemcpy = 0x800A7CA4; // size:0x64 (rmonmem, true)
__rmonCopyWords = 0x800A7D08; // size:0x64 (rmonmem, true)
// = 0x800A7D09; // (rmonmem, false)
strcpy = 0x800A7D6C; // size:0x60 (rmonmem, true)
__rmonReadMem = 0x800A7DCC; // size:0x22C (rmonmem, true)
__rmonWriteMem = 0x800A7FF8; // size:0x258 (rmonmem, true)
__rmonListProcesses = 0x800A8250; // size:0x8C (rmonmem, true)
__rmonLoadProgram = 0x800A82DC; // size:0x28 (rmonmem, true)
__rmonGetExeName = 0x800A8304; // size:0xC8 (rmonmem, true)
__rmonGetRegionCount = 0x800A83CC; // size:0x8C (rmonmem, true)
__rmonGetRegions = 0x800A8458; // size:0x1F8 (rmonmem, true)
__rmonSetFault = 0x800A8650; // size:0x68 (rmonmisc, true)
__rmonInit = 0x800A86B8; // size:0xE4 (rmonmisc, true)
__rmonPanic = 0x800A879C; // size:0x28 (rmonmisc, true)
__rmonSetComm = 0x800A87C4; // size:0x54 (rmonmisc, true)
LoadStoreSU = 0x800A8820; // size:0x90 (rmonregs, true)
// = 0x800A888C; // (rmonregs, false)
LoadStoreVU = 0x800A88B0; // size:0xA8 (rmonregs, true)
// = 0x800A890A; // (rmonregs, false)
SetUpForRCPop = 0x800A8958; // size:0xA4 (rmonregs, true)
// = 0x800A8985; // (rmonregs, false)
CleanupFromRCPop = 0x800A89FC; // size:0xA4 (rmonregs, true)
__rmonGetGRegisters = 0x800A8AA0; // size:0x180 (rmonregs, true)
__rmonSetGRegisters = 0x800A8C20; // size:0x184 (rmonregs, true)
// = 0x800A8D69; // (rmonregs, false)
__rmonGetFRegisters = 0x800A8DA4; // size:0xC4 (rmonregs, true)
__rmonSetFRegisters = 0x800A8E68; // size:0xC4 (rmonregs, true)
rmonGetRcpRegister = 0x800A8F2C; // size:0x74 (rmonregs, true)
__rmonGetSRegs = 0x800A8FA0; // size:0x164 (rmonregs, true)
__rmonSetSRegs = 0x800A9104; // size:0x12C (rmonregs, true)
__rmonGetVRegs = 0x800A9230; // size:0x13C (rmonregs, true)
__rmonSetVRegs = 0x800A936C; // size:0xE0 (rmonregs, true)
__rmonGetRegisterContents = 0x800A944C; // size:0x10C (rmonregs, true)
__rmonMaskIdleThreadInts = 0x800A9560; // size:0x84 (rmontask, true)
__rmonGetTCB = 0x800A95E4; // size:0x90 (rmontask, true)
// = 0x800A962F; // (rmontask, false)
__rmonStopUserThreads = 0x800A9674; // size:0x140 (rmontask, true)
__rmonListThreads = 0x800A97B4; // size:0x160 (rmontask, true)
// = 0x800A9827; // (rmontask, false)
__rmonGetThreadStatus = 0x800A9914; // size:0x310 (rmontask, true)
__rmonThreadStatus = 0x800A9C24; // size:0x88 (rmontask, true)
__rmonStopThread = 0x800A9CAC; // size:0x178 (rmontask, true)
__rmonRunThread = 0x800A9E24; // size:0x2D4 (rmontask, true)
__rmonSendHeader = 0x800AA100; // size:0xA8 (rmonmain, true)
__rmonSendReply = 0x800AA1A8; // size:0xB0 (rmonmain, true)
__rmonSendData = 0x800AA258; // size:0x158 (rmonmain, true)
rmonMain = 0x800AA3B0; // size:0x194 (rmonmain, true)
__osSpGetStatus = 0x800AA550; // size:0x28 (spgetstat, true)
__osSpRawReadIo = 0x800AA580; // (rmonmain, false)
__osSpRawWriteIo = 0x800AA640; // (rmonmem, false)
__osSiDeviceBusy = 0x800AA6D0; // size:0x48 (si, true)
__osGetActiveQueue = 0x800AA720; // (rmonbrk, false)
ldiv = 0x800AA750; // size:0xCC (ldiv, true)
lldiv = 0x800AA81C; // size:0x190 (ldiv, true)
__rmonRCPrunning = 0x800AA9B0; // (rmonregs, false)
__rmonIdleRCP = 0x800AA9D4; // (rmontask, false)
__rmonStepRCP = 0x800AAA18; // (rmonregs, false)
__rmonRunRCP = 0x800AAA2C; // (rmontask, false)
SetTempBreakpoint = 0x800AAA50; // size:0xC4 (rmonbrk, true)
// = 0x800AAAE3; // (rmonbrk, false)
ClearTempBreakpoint = 0x800AAB14; // size:0x114 (rmonbrk, true)
__rmonSetBreak = 0x800AAC28; // size:0x200 (rmonbrk, true)
__rmonListBreak = 0x800AAE28; // size:0x28 (rmonbrk, true)
__rmonClearBreak = 0x800AAE50; // size:0x180 (rmonbrk, true)
// = 0x800AAE70; // (rmonbrk, false)
__rmonGetBranchTarget = 0x800AAFD0; // size:0x294 (rmonbrk, true)
// = 0x800AB05F; // (rmonbrk, false)
// = 0x800AB1A9; // (rmonbrk, false)
// = 0x800AB209; // (rmonbrk, false)
IsJump = 0x800AB264; // size:0xCC (rmonbrk, true)
__rmonSetSingleStep = 0x800AB330; // size:0xEC (rmonbrk, true)
// = 0x800AB341; // (rmonbrk, false)
__rmonGetExceptionStatus = 0x800AB41C; // size:0x80 (rmonbrk, true)
rmonSendBreakMessage = 0x800AB49C; // size:0xC0 (rmonbrk, true)
__rmonHitBreak = 0x800AB55C; // size:0x38 (rmonbrk, true)
__rmonHitSpBreak = 0x800AB594; // size:0x70 (rmonbrk, true)
__rmonHitCpuFault = 0x800AB604; // size:0x38 (rmonbrk, true)
rmonFindFaultedThreads = 0x800AB63C; // size:0xFC (rmonbrk, true)
__divdi3 = 0x800AF7F0; // (ldiv, false)
__udivdi3 = 0x800AF960; // (initialize, false)
__umoddi3 = 0x800AF980; // (xlitob, false)
__osPiDevMgr = 0x800BE650; // (epidma, false)
// = 0x800BE650; // (pimgr, false)
__osPiTable = 0x800BE66C; // (cartrominit, false)
__osCurrentHandle = 0x800BE670; // (epirawdma, false)
// = 0x800BE680; // (cartrominit, false)
__osPiAccessQueueEnabled = 0x800BE690; // (pimgr, false)
// = 0x800BE6A0; // (aisetnextbuf, false)
// = 0x800BE6B0; // (drvrnew, false)
// = 0x800BE840; // (env, false)

alGlobals = 0x800BE960;

// = 0x800BE970; // (controller, false)
// = 0x800BE980; // (rotate, false)
// = 0x800BE990; // (us2dex_emu, false)
__osRdb_IP6_Empty = 0x800BE9C0; // (exceptasm, false)
// = 0x800BE9C0; // (rdbsend, false)
// = 0x800BE9D0; // (syncprintf, false)
// = 0x800BE9E0; // (seteventmesg, false)
// = 0x800BE9F0; // (sched, false)
__osThreadTail = 0x800BEA10; // (createmesgqueue, false)
__osRunQueue = 0x800BEA18; // (exceptasm, false)
__osActiveQueue = 0x800BEA1C; // (createthread, false)
__osRunningThread = 0x800BEA20; // (destroythread, false)
__osFaultedThread = 0x800BEA24; // (exceptasm, false)
__osTimerList = 0x800BEA30; // (settimer, false)
// = 0x800BEA30; // (timerintr, false)

__osViDevMgr = 0x800BEA40;

__additional_scanline = 0x800BEA5C; // (viswapcontext, false)
osViModeTable = 0x800BEA60; // (sched, false)
osViModeNtscLan1 = 0x800BFC80; // (vi, false)
osViModePalLan1 = 0x800C00E0; // (vi, false)
osViModeMpalLan1 = 0x800C0540; // (vi, false)
// = 0x800C0D60; // (initialize, false)
osViClock = 0x800C0D68; // (aisetfreq, false)
__osShutdown = 0x800C0D6C; // (exceptasm, false)
__OSGlobalIntMask = 0x800C0D70; // (exceptasm, false)
// = 0x800C0D80; // (error, false)
__osErrorHandler = 0x800C0D94; // (errorasm, false)
// = 0x800C0DA0; // (kmcprintf, false)
__kmcErrorHandler = 0x800C0FD8; // (errorasm, false)
// = 0x800C0FE0; // (exceptasm, false)
// = 0x800C1020; // (kdebugserver, false)
// = 0x800C1030; // (readhost, false)
// = 0x800C1040; // (xprintf, false)
// = 0x800C1090; // (log, false)
// = 0x800C10A0; // (vi, false)
__osViCurr = 0x800C1100; // (viswapcontext, false)
__osViNext = 0x800C1104; // (viblack, false)
// = 0x800C1110; // (xlitob, false)
// = 0x800C1140; // (rmoncmds, false)
// = 0x800C1220; // (rmonmain, false)
__osRcpImTable = 0x800C78F0; // (exceptasm, false)
// = 0x800C78F0; // (setintmask, false)
// = 0x800C7970; // (devmgr, false)
// = 0x800C7990; // (aisetfreq, false)
// = 0x800C79A0; // (drvrnew, false)
// = 0x800C79F0; // (env, false)
// = 0x800C7AF0; // (resample, false)
// = 0x800C7B20; // (reverb, false)
// = 0x800C7B80; // (save, false)
// = 0x800C7B8C; // (heapalloc, false)
// = 0x800C7BA0; // (synthesizer, false)
// = 0x800C7BD0; // (assert, false)
// = 0x800C7BF0; // (lookat, false)
// = 0x800C7C10; // (perspective, false)
// = 0x800C7C30; // (sinf, false)
// = 0x800C7C90; // (sched, false)
// = 0x800C7CC0; // (sirawdma, false)
// = 0x800C7CD0; // (visetevent, false)
// = 0x800C7CE4; // (visetmode, false)
// = 0x800C7CF4; // (viswapbuf, false)
// = 0x800C7D10; // (viswapcontext, false)
// = 0x800C7D20; // (kmcprintf, false)
// = 0x800C94B0; // (exceptasm, false)
// = 0x800C9520; // (epirawread, false)
__libm_qnan_f = 0x800C9540; // (cosf, false)
// = 0x800C9550; // (cosf, false)
// = 0x800C95C0; // (xprintf, false)
// = 0x800C9738; // (sprawdma, false)
// = 0x800C9770; // (xldtob, false)
// = 0x800C97E0; // (rmonmem, false)
// = 0x800C9818; // (rmonbrk, false)
// = 0x801931E0; // (pimgr, false)
// = 0x801949B0; // (us2dex_emu, false)
// = 0x801949D0; // (sptask, false)
// = 0x80194A20; // (vimgr, false)
// = 0x80195C90; // (kdebugserver, false)
// = 0x80195CA0; // (readhost, false)
// = 0x80195CC0; // (log, false)
// = 0x80195CE0; // (rmonsio, false)
// = 0x80195D00; // (rmonmisc, false)
// = 0x80199F10; // (rmonregs, false)
// = 0x80199F30; // (rmonmain, false)
// = 0x8019A3B0; // (rmonbrk, false)
__osRdb_DbgRead_Buf = 0x8019D154; // size:0x4 (rmonsio, true)
__osBaseCounter = 0x801AB618; // size:0x4 (timerintr, true)
__kmc_pt_mode = 0x801AB62C; // size:0x4 (initialize, true)
__osThreadSave = 0x801AB630; // (exceptasm, false)
__osProfileOverflowBin = 0x801AB7E4; // size:0x4 (timerintr, true)
__osContPifRam = 0x801AB820; // size:0x40 (controller, true)
__osRdb_IP6_CurWrite = 0x801AB8A0; // size:0x4 (initrdb, true)
__Dom2SpeedParam = 0x801AB908; // (initialize, false)
__osProfileList = 0x801AB97C; // size:0x4 (timerintr, true)
__osViIntrCount = 0x801ADC08; // size:0x4 (timerintr, true)
__osRdb_Read_Data_Ct = 0x801C6C8C; // size:0x4 (readhost, true)
__osRdb_IP6_Size = 0x801C6E50; // size:0x4 (initrdb, true)
__osMaxControllers = 0x801C6EC0; // size:0x1 (controller, true)
__osCurrentTime = 0x801C6EF8; // size:0x8 (timerintr, true)
__CartRomHandle = 0x801C6F08; // size:0x74 (cartrominit, true)
__osPiAccessQueue = 0x801C7090; // (pimgr, false)
__Dom1SpeedParam = 0x801C70E0; // (initialize, false)
__rmonUtilityBuffer = 0x801C7240; // size:0x100 (rmonmem, true)
rmonRdbReadBuf = 0x801C73A0; // size:0x800 (rmonsio, true)
__osContLastCmd = 0x801C7BAA; // size:0x1 (controller, true)
__osEepromTimerMsg = 0x801F9C40; // size:0x4 (controller, true)
__osRdb_IP6_CurSend = 0x801F9CA0; // size:0x4 (initrdb, true)
__osTimerCounter = 0x801F9CBC; // size:0x4 (timerintr, true)
__osProfileListEnd = 0x8021AA7C; // size:0x4 (timerintr, true)
__osProfTimerQ = 0x8021AA88; // size:0x18 (timerintr, true)
__osRdb_Read_Data_Buf = 0x8021AD58; // size:0x4 (readhost, true)
__osEventStateTab = 0x8021B970; // size:0xB8 (seteventmesg, true)
__osRdb_IP6_Data = 0x8021BA58; // size:0x4 (initrdb, true)
__osEepromTimerQ = 0x8021BA80; // size:0x18 (controller, true)
__rmonRcpAtBreak = 0x8021BEC0; // size:0x1 (rmonbrk, true)
__rmonMQ = 0x8021BEC8; // size:0x18 (rmonmisc, true)
__osRdb_IP6_Ct = 0x8021BEE0; // size:0x4 (initrdb, true)
