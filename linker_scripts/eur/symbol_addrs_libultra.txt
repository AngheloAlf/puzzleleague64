osTvType = 0x80000300; // (initialize, false)
osRomBase = 0x80000308; // (pirawdma, false)
osResetType = 0x8000030C; // (initialize, false)
osAppNMIBuffer = 0x8000031C; // (initialize, false)
osSetIntMask = 0x800914F0; // (sched, false)
osCreatePiManager = 0x80091590; // size:0x234 (pimgr, true)
ramromMain = 0x800917C4; // size:0x10C (pimgr, true)
__osEPiRawStartDma = 0x800918D0; // size:0x3E0 (epirawdma, true)
osEPiStartDma = 0x80091DD0; // size:0x23C (epidma, true)
osEPiLinkHandle = 0x80092010; // size:0x5C (epilinkhandle, true)
osCartRomInit = 0x80092070; // size:0x1F0 (cartrominit, true)
__osDevMgrMain = 0x80092260; // size:0x540 (devmgr, true)
__osPiCreateAccessQueue = 0x800927A0; // (pimgr, false)
__osPiGetAccess = 0x800927FC; // (cartrominit, false)
__osPiRelAccess = 0x8009284C; // (cartrominit, false)
osPiStartDma = 0x80092890; // size:0x240 (pidma, true)
osAiGetLength = 0x80092AD0; // size:0x28 (aigetlen, true)
osAiGetStatus = 0x80092B00; // size:0x28 (aigetstat, true)
osAiSetFrequency = 0x80092B30; // size:0x2B0 (aisetfreq, true)
osAiSetNextBuffer = 0x80092DE0; // size:0x108 (aisetnextbuf, true)
_init_lpfilter = 0x80092EF0; // size:0x16C (drvrnew, true)
alFxNew = 0x8009305C; // size:0x5FC (drvrnew, true)
alEnvmixerNew = 0x80093658; // size:0x128 (drvrnew, true)
alLoadNew = 0x80093780; // size:0xD4 (drvrnew, true)
alResampleNew = 0x80093854; // size:0xB8 (drvrnew, true)
alAuxBusNew = 0x8009390C; // size:0x6C (drvrnew, true)
alMainBusNew = 0x80093978; // size:0x6C (drvrnew, true)
alSaveNew = 0x800939E4; // size:0x58 (drvrnew, true)
alAdpcmPull = 0x80093A40; // size:0x744 (load, true)
alRaw16Pull = 0x80094184; // size:0x6B0 (load, true)
// = 0x8009474B; // (load, false)
alLoadParam = 0x80094834; // size:0x370 (load, true)
_decodeChunk = 0x80094BA4; // size:0x214 (load, true)
alAuxBusPull = 0x80094DC0; // size:0x140 (auxbus, true)
alAuxBusParam = 0x80094F00; // size:0x90 (auxbus, true)
alEnvmixerPull = 0x80094F90; // size:0x87C (env, true)
// = 0x80095734; // (env, false)
alEnvmixerParam = 0x8009580C; // size:0x1B4 (env, true)
_pullSubFrame = 0x800959C0; // size:0x4B8 (env, true)
// = 0x80095ABE; // (env, false)
// = 0x80095BC6; // (env, false)
// = 0x80095C0B; // (env, false)
// = 0x80095E15; // (env, false)
_frexpf = 0x80095E78; // size:0x160 (env, true)
_ldexpf = 0x80095FD8; // size:0x5C (env, true)
_getRate = 0x80096034; // size:0x2B8 (env, true)
_getVol = 0x800962EC; // size:0x138 (env, true)
alFilterNew = 0x80096430; // size:0x68 (filter, true)
alMainBusPull = 0x800964A0; // size:0x1D0 (mainbus, true)
alMainBusParam = 0x80096670; // size:0x90 (mainbus, true)
alResamplePull = 0x80096700; // size:0x2DC (resample, true)
alResampleParam = 0x800969DC; // size:0x188 (resample, true)
alFxPull = 0x80096B70; // size:0x5A0 (reverb, true)
alFxParam = 0x80097110; // size:0x54 (reverb, true)
alFxParamHdl = 0x80097164; // size:0x35C (reverb, true)
// = 0x8009726C; // (reverb, false)
// = 0x800974B2; // (reverb, false)
_loadOutputBuffer = 0x800974C0; // size:0x308 (reverb, true)
// = 0x800976B0; // (reverb, false)
_loadBuffer = 0x800977C8; // size:0x2A8 (reverb, true)
// = 0x8009788D; // (reverb, false)
// = 0x80097968; // (reverb, false)
_saveBuffer = 0x80097A70; // size:0x27C (reverb, true)
_filterBuffer = 0x80097CEC; // size:0x124 (reverb, true)
_doModFunc = 0x80097E10; // size:0x108 (reverb, true)
alSavePull = 0x80097F20; // size:0x168 (save, true)
alSaveParam = 0x80098088; // size:0x94 (save, true)
alInit = 0x80098120; // size:0x58 (sl, true)
alClose = 0x80098178; // size:0x48 (sl, true)
alLink = 0x800981C0; // size:0x6C (sl, true)
alUnlink = 0x8009822C; // size:0x68 (sl, true)
alHeapInit = 0x800982A0; // size:0x94 (heapinit, true)
alHeapDBAlloc = 0x80098340; // size:0x168 (heapalloc, true)
alCopy = 0x800984B0; // size:0x8C (copy, true)
alSynNew = 0x80098540; // size:0x444 (synthesizer, true)
alAudioFrame = 0x80098984; // size:0x258 (synthesizer, true)
// = 0x80098ABC; // (synthesizer, false)
// = 0x80098B43; // (synthesizer, false)
// = 0x80098BD3; // (synthesizer, false)
__allocParam = 0x80098BDC; // size:0x6C (synthesizer, true)
__freeParam = 0x80098C48; // size:0x48 (synthesizer, true)
_collectPVoices = 0x80098C90; // size:0x6C (synthesizer, true)
_freePVoice = 0x80098CFC; // size:0x48 (synthesizer, true)
_timeToSamplesNoRound = 0x80098D44; // size:0x78 (synthesizer, true)
_timeToSamples = 0x80098DBC; // size:0x48 (synthesizer, true)
__nextSampleTime = 0x80098E04; // size:0xF8 (synthesizer, true)
alSynDelete = 0x80098F00; // size:0x28 (syndelete, true)
alSynAddPlayer = 0x80098F30; // size:0x6C (synaddplayer, true)
alSynRemovePlayer = 0x80098FA0; // size:0xD8 (synremoveplayer, true)
alSynFreeVoice = 0x80099080; // size:0xFC (synfreevoice, true)
alSynAllocVoice = 0x80099180; // size:0x22C (synallocvoice, true)
// = 0x80099321; // (synallocvoice, false)
_allocatePVoice = 0x800993AC; // size:0x150 (synallocvoice, true)
alSynStopVoice = 0x80099500; // size:0xC4 (synstopvoice, true)
alSynStartVoice = 0x800995D0; // size:0xE4 (synstartvoice, true)
alSynSetPitch = 0x800996C0; // size:0xD4 (synsetpitch, true)
alSynSetVol = 0x800997A0; // size:0xF8 (synsetvol, true)
alSynSetFXMix = 0x800998A0; // size:0xF8 (synsetfxmix, true)
alSynSetPan = 0x800999A0; // size:0xE0 (synsetpan, true)
alSynAllocFX = 0x80099A80; // size:0x154 (synallocfx, true)
osInvalDCache = 0x80099BE0; // (sirawdma, false)
osWritebackDCache = 0x80099C90; // (initialize, false)
osWritebackDCacheAll = 0x80099D10; // (sched, false)
osContStartQuery = 0x80099D40; // size:0x94 (contquery, true)
osContGetQuery = 0x80099DD4; // size:0x34 (contquery, true)
osContStartReadData = 0x80099E10; // size:0x9C (contreaddata, true)
osContGetReadData = 0x80099EAC; // size:0xFC (contreaddata, true)
// = 0x80099F42; // (contreaddata, false)
__osPackReadData = 0x80099FA8; // size:0x134 (contreaddata, true)
osContReset = 0x8009A0E0; // size:0x10C (contreset, true)
// = 0x8009A1A9; // (contreset, false)
__osPackResetData = 0x8009A1EC; // size:0x84 (contreset, true)
osContInit = 0x8009A270; // size:0x1BC (controller, true)
// = 0x8009A3BD; // (controller, false)
__osContGetInitData = 0x8009A42C; // size:0x128 (controller, true)
// = 0x8009A49B; // (controller, false)
__osPackRequestData = 0x8009A554; // size:0x144 (controller, true)
osContSetCh = 0x8009A6A0; // size:0x80 (contsetch, true)
osVirtualToPhysical = 0x8009A720; // size:0xDC (virtualtophysical, true)
__assert = 0x8009A800; // size:0x48 (assert, true)
guLookAtF = 0x8009A850; // size:0x41C (lookat, true)
guLookAt = 0x8009AC6C; // size:0x84 (lookat, true)
guMtxF2L = 0x8009ACF0; // size:0x170 (mtxutil, true)
guMtxL2F = 0x8009AE60; // size:0x188 (mtxutil, true)
// = 0x8009AF2A; // (mtxutil, false)
guMtxIdentF = 0x8009AFE8; // size:0xEC (mtxutil, true)
guMtxIdent = 0x8009B0D4; // size:0x3C (mtxutil, true)
guPerspectiveF = 0x8009B110; // size:0x2C0 (perspective, true)
guPerspective = 0x8009B3D0; // size:0x6C (perspective, true)
guRotateF = 0x8009B440; // size:0x24C (rotate, true)
guRotate = 0x8009B68C; // size:0x5C (rotate, true)
__sinf = 0x8009B6F0; // size:0x2AC (sinf, true)
sinf = 0x8009B6F0; // (perspective, false)
guTranslateF = 0x8009B9A0; // size:0x6C (translate, true)
guTranslate = 0x8009BA0C; // size:0x54 (translate, true)
guS2DInitBg = 0x8009BA60; // size:0x214 (us2dex, true)
guS2DEmuSetScissor = 0x8009BC80; // size:0x84 (us2dex_emu, true)
// = 0x8009BCE3; // (us2dex_emu, false)
tmemLoad_B = 0x8009BD04; // size:0xFC (us2dex_emu, true)
// = 0x8009BDA0; // (us2dex_emu, false)
tmemLoad_A = 0x8009BE00; // size:0xEC (us2dex_emu, true)
// = 0x8009BE51; // (us2dex_emu, false)
tmemLoad = 0x8009BEEC; // size:0x498 (us2dex_emu, true)
guS2DEmuBgRect1Cyc = 0x8009C384; // size:0xD90 (us2dex_emu, true)
__osRdbSend = 0x8009D120; // size:0x2E4 (rdbsend, true)
osInitRdb = 0x8009D410; // size:0xAC (initrdb, true)
bcopy = 0x8009D4C0; // (sptask, false)
bzero = 0x8009D7E0; // (cartrominit, false)
strchr = 0x8009D880; // size:0x7C (string, true)
strlen = 0x8009D8FC; // size:0x68 (string, true)
memcpy = 0x8009D964; // size:0x98 (string, true)
sprintf = 0x8009DA00; // size:0x80 (sprintf, true)
proutSprintf = 0x8009DA80; // size:0x50 (sprintf, true)
proutSyncPrintf = 0x8009DAD0; // size:0x90 (syncprintf, true)
// = 0x8009DB3C; // (syncprintf, false)
rmonPutchar = 0x8009DB60; // size:0x88 (syncprintf, true)
kmc_proutSyncPrintf = 0x8009DBE8; // size:0x258 (syncprintf, true)
osSyncPrintf = 0x8009DE40; // size:0x8C (syncprintf, true)
rmonPrintf = 0x8009DECC; // size:0x6C (syncprintf, true)
osCreateMesgQueue = 0x8009DF40; // size:0x9C (createmesgqueue, true)
osJamMesg = 0x8009DFE0; // size:0x1B4 (jammesg, true)
osRecvMesg = 0x8009E1A0; // size:0x1A8 (recvmesg, true)
osSendMesg = 0x8009E350; // size:0x1AC (sendmesg, true)
osSetEventMesg = 0x8009E500; // size:0xF4 (seteventmesg, true)
osGetCount = 0x8009E600; // (gettime, false)
_VirtualToPhysicalTask = 0x8009E610; // size:0x148 (sptask, true)
osSpTaskLoad = 0x8009E758; // size:0x28C (sptask, true)
osSpTaskStartGo = 0x8009E9E4; // size:0x50 (sptask, true)
osCreateScheduler = 0x8009EA40; // size:0x1C4 (sched, true)
osScAddClient = 0x8009EC04; // size:0x6C (sched, true)
osScRemoveClient = 0x8009EC70; // size:0xC4 (sched, true)
osScGetCmdQ = 0x8009ED34; // size:0x30 (sched, true)
__scMain = 0x8009ED64; // size:0x138 (sched, true)
// = 0x8009ED85; // (sched, false)
__scHandleRetrace = 0x8009EE9C; // size:0x180 (sched, true)
// = 0x8009EEA5; // (sched, false)
__scHandleRSP = 0x8009F01C; // size:0x204 (sched, true)
// = 0x8009F028; // (sched, false)
// = 0x8009F121; // (sched, false)
// = 0x8009F178; // (sched, false)
__scHandleRDP = 0x8009F220; // size:0x14C (sched, true)
// = 0x8009F280; // (sched, false)
// = 0x8009F367; // (sched, false)
__scTaskReady = 0x8009F36C; // size:0x74 (sched, true)
__scTaskComplete = 0x8009F3E0; // size:0x160 (sched, true)
// = 0x8009F4AB; // (sched, false)
// = 0x8009F4F9; // (sched, false)
__scAppendList = 0x8009F540; // size:0x134 (sched, true)
__scExec = 0x8009F674; // size:0x1B0 (sched, true)
__scYield = 0x8009F824; // size:0x68 (sched, true)
__scSchedule = 0x8009F88C; // size:0x38C (sched, true)
__osSiRawStartDma = 0x8009FC20; // size:0xF4 (sirawdma, true)
__osSiCreateAccessQueue = 0x8009FD20; // (controller, false)
__osSiGetAccess = 0x8009FD7C; // (contquery, false)
__osSiRelAccess = 0x8009FDCC; // (contquery, false)
osCreateThread = 0x8009FE10; // size:0x1C8 (createthread, true)
osDestroyThread = 0x8009FFE0; // size:0x120 (destroythread, true)
osGetThreadPri = 0x800A0100; // size:0x44 (getthreadpri, true)
osSetThreadPri = 0x800A0150; // size:0x144 (setthreadpri, true)
osStartThread = 0x800A02A0; // size:0x19C (startthread, true)
osStopThread = 0x800A0440; // size:0xEC (stopthread, true)
__osDequeueThread = 0x800A0530; // size:0x60 (thread, true)
osYieldThread = 0x800A0590; // size:0x58 (yieldthread, true)
osGetTime = 0x800A05F0; // size:0xD8 (gettime, true)
osSetTimer = 0x800A06D0; // size:0x100 (settimer, true)
__osTimerServicesInit = 0x800A07D0; // size:0xAC (timerintr, true)
__osTimerInterrupt = 0x800A087C; // size:0x328 (timerintr, true)
// = 0x800A0AAF; // (timerintr, false)
// = 0x800A0B0F; // (timerintr, false)
__osSetTimerIntr = 0x800A0BA4; // size:0x80 (timerintr, true)
__osInsertTimer = 0x800A0C24; // size:0x1A4 (timerintr, true)
__osProbeTLB = 0x800A0DD0; // (virtualtophysical, false)
osViGetCurrentFramebuffer = 0x800A0E90; // (sched, false)
osViGetNextFramebuffer = 0x800A0F10; // (sched, false)
osViGetCurrentLine = 0x800A0F90; // size:0x28 (vigetline, true)
osCreateViManager = 0x800A0FC0; // size:0x214 (vimgr, true)
viMgrMain = 0x800A11D4; // size:0x208 (vimgr, true)
osViSetEvent = 0x800A13E0; // size:0xCC (visetevent, true)
osViSetMode = 0x800A14B0; // size:0xD0 (visetmode, true)
osViSetSpecialFeatures = 0x800A1580; // size:0x288 (visetspecial, true)
osViSetYScale = 0x800A1810; // size:0x13C (visetyscale, true)
osViSwapBuffer = 0x800A1950; // size:0xE0 (viswapbuf, true)
__osViSwapContext = 0x800A1A30; // size:0x370 (viswapcontext, true)
osViBlack = 0x800A1DA0; // size:0x94 (viblack, true)
osAfterPreNMI = 0x800A1EA0; // size:0x38 (afterprenmi, true)
osInitialize = 0x800A1EE0; // size:0x4D4 (initialize, true)
// = 0x800A2294; // (initialize, false)
ptstart = 0x800A23B4; // size:0x1C (initialize, true)
createSpeedParam = 0x800A23D0; // size:0xB4 (initialize, true)
__osError = 0x800A2490; // (aisetfreq, false)
__osDefaultHandler = 0x800A24E0; // size:0x84 (error, true)
// proutSyncPrintf = 0x800A2570; // size:0x90 (kmcprintf, true)
// = 0x800A25DC; // (kmcprintf, false)
// rmonPutchar = 0x800A2600; // size:0x88 (kmcprintf, true)
// kmc_proutSyncPrintf = 0x800A2688; // size:0x258 (kmcprintf, true)
kmcErrorHandler = 0x800A28E0; // size:0xD0 (kmcprintf, true)
// = 0x800A29B0; // (exceptasm, false)
__osExceptionPreamble = 0x800A29B0; // (initialize, false)
__ptExceptionPreamble = 0x800A29C0; // (initialize, false)
// = 0x800A313F; // (exceptasm, false)
// = 0x800A32B9; // (exceptasm, false)
// = 0x800A32EF; // (exceptasm, false)
__osEnqueueAndYield = 0x800A34B4; // (jammesg, false)
__osEnqueueThread = 0x800A35BC; // (setthreadpri, false)
__osPopThread = 0x800A3604; // (jammesg, false)
__osDispatchThread = 0x800A3614; // (destroythread, false)
__osCleanupThread = 0x800A3790; // (createthread, false)
__osDisableInt = 0x800A37A0; // (cartrominit, false)
__osRestoreInt = 0x800A3810; // (cartrominit, false)
__osSetGlobalIntMask = 0x800A3830; // size:0x58 (setglobalintmask, true)
__osResetGlobalIntMask = 0x800A3890; // size:0x64 (resetglobalintmask, true)
__osPiRawStartDma = 0x800A3900; // size:0x1DC (pirawdma, true)
osPiGetCmdQueue = 0x800A3AE0; // size:0x48 (pigetcmdq, true)
__osEPiRawReadIo = 0x800A3B30; // size:0x2D4 (epirawread, true)
__osEPiRawWriteIo = 0x800A3E10; // size:0x2A4 (epirawwrite, true)
__osAiDeviceBusy = 0x800A40C0; // size:0x4C (ai, true)
osInvalICache = 0x800A4110; // (initialize, false)
string_to_u32 = 0x800A4190; // size:0x88 (kdebugserver, true)
// = 0x800A41F6; // (kdebugserver, false)
send_packet = 0x800A4218; // size:0xC4 (kdebugserver, true)
// = 0x800A4289; // (kdebugserver, false)
clear_IP6 = 0x800A42DC; // size:0x78 (kdebugserver, true)
// = 0x800A42E3; // (kdebugserver, false)
send = 0x800A4354; // size:0xF0 (kdebugserver, true)
kdebugserver = 0x800A4444; // size:0x11C (kdebugserver, true)
sqrtf = 0x800A4560; // (lookat, false)
__cosf = 0x800A4570; // size:0x238 (cosf, true)
cosf = 0x800A4570; // (perspective, false)
guNormalize = 0x800A47B0; // size:0xD8 (normalize, true)
osReadHost = 0x800A4890; // size:0xE0 (readhost, true)
_Printf = 0x800A4970; // size:0x910 (xprintf, true)
// = 0x800A503C; // (xprintf, false)
_Putfld = 0x800A5280; // size:0x8E4 (xprintf, true)
osCreateLog = 0x800A5B70; // size:0x6C (log, true)
osLogEvent = 0x800A5BDC; // size:0x8C (log, true)
osFlushLog = 0x800A5C68; // size:0x218 (log, true)
// = 0x800A5DBC; // (log, false)
__osLogWrite = 0x800A5E80; // size:0x1FC (log, true)
osDpSetNextBuffer = 0x800A6080; // size:0x130 (dpsetnextbuf, true)
__osGetCause = 0x800A61B0; // (initialize, false)
__osGetSR = 0x800A61C0; // (initialize, false)
__osSetCompare = 0x800A61D0; // (timerintr, false)
__osSetFpcCsr = 0x800A61E0; // (initialize, false)
__osSetSR = 0x800A61F0; // (initialize, false)
__rmonSendFault = 0x800A6200; // size:0x88 (rmonsio, true)
__rmonIOflush = 0x800A6288; // size:0x60 (rmonsio, true)
__rmonIOputw = 0x800A62E8; // size:0x84 (rmonsio, true)
__rmonIOhandler = 0x800A636C; // size:0xE4 (rmonsio, true)
__osSpDeviceBusy = 0x800A6450; // size:0x48 (sp, true)
__osSpSetStatus = 0x800A64A0; // size:0x2C (spsetstat, true)
__osSpSetPc = 0x800A64D0; // size:0x50 (spsetpc, true)
__osSpRawStartDma = 0x800A6520; // size:0x130 (sprawdma, true)
osSpTaskYield = 0x800A6650; // size:0x2C (sptaskyield, true)
osSpTaskYielded = 0x800A6680; // size:0x88 (sptaskyielded, true)
__osSiRawReadIo = 0x800A6710; // (initialize, false)
__osSiRawWriteIo = 0x800A67D0; // (initialize, false)
osMapTLBRdb = 0x800A6860; // (initialize, false)
osUnmapTLBAll = 0x800A68C0; // (initialize, false)
__osViInit = 0x800A6910; // size:0x158 (vi, true)
__osViGetCurrentContext = 0x800A6A70; // (vimgr, false)
_Litob = 0x800A6AA0; // size:0x3B0 (xlitob, true)
_Ldtob = 0x800A6E50; // size:0x708 (xldtob, true)
// = 0x800A7396; // (xldtob, false)
// = 0x800A748C; // (xldtob, false)
_Ldunscale = 0x800A7558; // size:0x148 (xldtob, true)
_Genld = 0x800A76A0; // size:0x924 (xldtob, true)
__osDpDeviceBusy = 0x800A7FD0; // size:0x48 (dp, true)
NotImplemented = 0x800A8020; // size:0x28 (rmoncmds, true)
__rmonExecute = 0x800A8048; // size:0xAC (rmoncmds, true)
__rmonWriteWordTo = 0x800A8100; // size:0x50 (rmonmem, true)
// = 0x800A813C; // (rmonmem, false)
__rmonReadWordAt = 0x800A8150; // size:0x74 (rmonmem, true)
// = 0x800A8193; // (rmonmem, false)
__rmonMemcpy = 0x800A81C4; // size:0x64 (rmonmem, true)
__rmonCopyWords = 0x800A8228; // size:0x64 (rmonmem, true)
// = 0x800A8229; // (rmonmem, false)
strcpy = 0x800A828C; // size:0x60 (rmonmem, true)
__rmonReadMem = 0x800A82EC; // size:0x22C (rmonmem, true)
__rmonWriteMem = 0x800A8518; // size:0x258 (rmonmem, true)
__rmonListProcesses = 0x800A8770; // size:0x8C (rmonmem, true)
__rmonLoadProgram = 0x800A87FC; // size:0x28 (rmonmem, true)
__rmonGetExeName = 0x800A8824; // size:0xC8 (rmonmem, true)
__rmonGetRegionCount = 0x800A88EC; // size:0x8C (rmonmem, true)
__rmonGetRegions = 0x800A8978; // size:0x1F8 (rmonmem, true)
__rmonSetFault = 0x800A8B70; // size:0x68 (rmonmisc, true)
__rmonInit = 0x800A8BD8; // size:0xE4 (rmonmisc, true)
__rmonPanic = 0x800A8CBC; // size:0x28 (rmonmisc, true)
__rmonSetComm = 0x800A8CE4; // size:0x54 (rmonmisc, true)
LoadStoreSU = 0x800A8D40; // size:0x90 (rmonregs, true)
// = 0x800A8DAC; // (rmonregs, false)
LoadStoreVU = 0x800A8DD0; // size:0xA8 (rmonregs, true)
// = 0x800A8E2A; // (rmonregs, false)
SetUpForRCPop = 0x800A8E78; // size:0xA4 (rmonregs, true)
// = 0x800A8EA5; // (rmonregs, false)
CleanupFromRCPop = 0x800A8F1C; // size:0xA4 (rmonregs, true)
__rmonGetGRegisters = 0x800A8FC0; // size:0x180 (rmonregs, true)
__rmonSetGRegisters = 0x800A9140; // size:0x184 (rmonregs, true)
// = 0x800A9289; // (rmonregs, false)
__rmonGetFRegisters = 0x800A92C4; // size:0xC4 (rmonregs, true)
__rmonSetFRegisters = 0x800A9388; // size:0xC4 (rmonregs, true)
rmonGetRcpRegister = 0x800A944C; // size:0x74 (rmonregs, true)
__rmonGetSRegs = 0x800A94C0; // size:0x164 (rmonregs, true)
__rmonSetSRegs = 0x800A9624; // size:0x12C (rmonregs, true)
__rmonGetVRegs = 0x800A9750; // size:0x13C (rmonregs, true)
__rmonSetVRegs = 0x800A988C; // size:0xE0 (rmonregs, true)
__rmonGetRegisterContents = 0x800A996C; // size:0x10C (rmonregs, true)
__rmonMaskIdleThreadInts = 0x800A9A80; // size:0x84 (rmontask, true)
__rmonGetTCB = 0x800A9B04; // size:0x90 (rmontask, true)
// = 0x800A9B4F; // (rmontask, false)
__rmonStopUserThreads = 0x800A9B94; // size:0x140 (rmontask, true)
__rmonListThreads = 0x800A9CD4; // size:0x160 (rmontask, true)
// = 0x800A9D47; // (rmontask, false)
__rmonGetThreadStatus = 0x800A9E34; // size:0x310 (rmontask, true)
__rmonThreadStatus = 0x800AA144; // size:0x88 (rmontask, true)
__rmonStopThread = 0x800AA1CC; // size:0x178 (rmontask, true)
__rmonRunThread = 0x800AA344; // size:0x2D4 (rmontask, true)
__rmonSendHeader = 0x800AA620; // size:0xA8 (rmonmain, true)
__rmonSendReply = 0x800AA6C8; // size:0xB0 (rmonmain, true)
__rmonSendData = 0x800AA778; // size:0x158 (rmonmain, true)
rmonMain = 0x800AA8D0; // size:0x194 (rmonmain, true)
__osSpGetStatus = 0x800AAA70; // size:0x28 (spgetstat, true)
__osSpRawReadIo = 0x800AAAA0; // (rmonmain, false)
__osSpRawWriteIo = 0x800AAB60; // (rmonmem, false)
__osSiDeviceBusy = 0x800AABF0; // size:0x48 (si, true)
__osGetActiveQueue = 0x800AAC40; // (rmonbrk, false)
ldiv = 0x800AAC70; // size:0xCC (ldiv, true)
lldiv = 0x800AAD3C; // size:0x190 (ldiv, true)
__rmonRCPrunning = 0x800AAED0; // (rmonregs, false)
__rmonIdleRCP = 0x800AAEF4; // (rmontask, false)
__rmonStepRCP = 0x800AAF38; // (rmonregs, false)
__rmonRunRCP = 0x800AAF4C; // (rmontask, false)
SetTempBreakpoint = 0x800AAF70; // size:0xC4 (rmonbrk, true)
// = 0x800AB003; // (rmonbrk, false)
ClearTempBreakpoint = 0x800AB034; // size:0x114 (rmonbrk, true)
__rmonSetBreak = 0x800AB148; // size:0x200 (rmonbrk, true)
__rmonListBreak = 0x800AB348; // size:0x28 (rmonbrk, true)
__rmonClearBreak = 0x800AB370; // size:0x180 (rmonbrk, true)
// = 0x800AB390; // (rmonbrk, false)
__rmonGetBranchTarget = 0x800AB4F0; // size:0x294 (rmonbrk, true)
// = 0x800AB57F; // (rmonbrk, false)
// = 0x800AB6C9; // (rmonbrk, false)
// = 0x800AB729; // (rmonbrk, false)
IsJump = 0x800AB784; // size:0xCC (rmonbrk, true)
__rmonSetSingleStep = 0x800AB850; // size:0xEC (rmonbrk, true)
// = 0x800AB861; // (rmonbrk, false)
__rmonGetExceptionStatus = 0x800AB93C; // size:0x80 (rmonbrk, true)
rmonSendBreakMessage = 0x800AB9BC; // size:0xC0 (rmonbrk, true)
__rmonHitBreak = 0x800ABA7C; // size:0x38 (rmonbrk, true)
__rmonHitSpBreak = 0x800ABAB4; // size:0x70 (rmonbrk, true)
__rmonHitCpuFault = 0x800ABB24; // size:0x38 (rmonbrk, true)
rmonFindFaultedThreads = 0x800ABB5C; // size:0xFC (rmonbrk, true)
__divdi3 = 0x800AFD10; // (ldiv, false)
__udivdi3 = 0x800AFE80; // (initialize, false)
__umoddi3 = 0x800AFEA0; // (xlitob, false)
__osPiDevMgr = 0x800BEB80; // (epidma, false)
// = 0x800BEB80; // (pimgr, false)
__osPiTable = 0x800BEB9C; // (cartrominit, false)
__osCurrentHandle = 0x800BEBA0; // (epirawdma, false)
// = 0x800BEBB0; // (cartrominit, false)
__osPiAccessQueueEnabled = 0x800BEBC0; // (pimgr, false)
// = 0x800BEBD0; // (aisetnextbuf, false)
// = 0x800BEBE0; // (drvrnew, false)
// = 0x800BED70; // (env, false)
// alGlobals = 0x800BEE90; // (env, false)
// = 0x800BEE90; // (sl, false)
// alGlobals = 0x800BEE90; // (synthesizer, false)
// = 0x800BEEA0; // (controller, false)
// = 0x800BEEB0; // (rotate, false)
// = 0x800BEEC0; // (us2dex_emu, false)
__osRdb_IP6_Empty = 0x800BEEF0; // (exceptasm, false)
// = 0x800BEEF0; // (rdbsend, false)
// = 0x800BEF00; // (syncprintf, false)
// = 0x800BEF10; // (seteventmesg, false)
// = 0x800BEF20; // (sched, false)
__osThreadTail = 0x800BEF40; // (createmesgqueue, false)
__osRunQueue = 0x800BEF48; // (exceptasm, false)
__osActiveQueue = 0x800BEF4C; // (createthread, false)
__osRunningThread = 0x800BEF50; // (destroythread, false)
__osFaultedThread = 0x800BEF54; // (exceptasm, false)
__osTimerList = 0x800BEF60; // (settimer, false)
// = 0x800BEF60; // (timerintr, false)
// __osViDevMgr = 0x800BEF70; // (gettime, false)
// = 0x800BEF70; // (vimgr, false)
// __osViDevMgr = 0x800BEF70; // (visetevent, false)
__additional_scanline = 0x800BEF8C; // (viswapcontext, false)
osViModeTable = 0x800BEF90; // (sched, false)
osViModeNtscLan1 = 0x800C01B0; // (vi, false)
osViModePalLan1 = 0x800C0610; // (vi, false)
osViModeMpalLan1 = 0x800C0A70; // (vi, false)
// = 0x800C1290; // (initialize, false)
osViClock = 0x800C1298; // (aisetfreq, false)
__osShutdown = 0x800C129C; // (exceptasm, false)
__OSGlobalIntMask = 0x800C12A0; // (exceptasm, false)
// = 0x800C12B0; // (error, false)
__osErrorHandler = 0x800C12C4; // type:void* (errorasm, false)
// = 0x800C12D0; // (kmcprintf, false)
__kmcErrorHandler = 0x800C1508; // (errorasm, false)
// = 0x800C1510; // (exceptasm, false)
// = 0x800C1550; // (kdebugserver, false)
// = 0x800C1560; // (readhost, false)
// = 0x800C1570; // (xprintf, false)
// = 0x800C15C0; // (log, false)
// = 0x800C15D0; // (vi, false)
__osViCurr = 0x800C1630; // (viswapcontext, false)
__osViNext = 0x800C1634; // (viblack, false)
// = 0x800C1640; // (xlitob, false)
// = 0x800C1670; // (rmoncmds, false)
// = 0x800C1750; // (rmonmain, false)
__osRcpImTable = 0x800C7BA0; // (exceptasm, false)
// = 0x800C7BA0; // (setintmask, false)
// = 0x800C7C20; // (devmgr, false)
// = 0x800C7C40; // (aisetfreq, false)
// = 0x800C7C50; // (drvrnew, false)
// = 0x800C7CA0; // (env, false)
// = 0x800C7DA0; // (resample, false)
// = 0x800C7DD0; // (reverb, false)
// = 0x800C7E30; // (save, false)
// = 0x800C7E3C; // (heapalloc, false)
// = 0x800C7E50; // (synthesizer, false)
// = 0x800C7E80; // (assert, false)
// = 0x800C7EA0; // (lookat, false)
// = 0x800C7EC0; // (perspective, false)
// = 0x800C7EE0; // (sinf, false)
// = 0x800C7F40; // (sched, false)
// = 0x800C7F70; // (sirawdma, false)
// = 0x800C7F80; // (visetevent, false)
// = 0x800C7F94; // (visetmode, false)
// = 0x800C7FA4; // (viswapbuf, false)
// = 0x800C7FC0; // (viswapcontext, false)
// = 0x800C7FD0; // (kmcprintf, false)
// = 0x800C9760; // (exceptasm, false)
// = 0x800C97D0; // (epirawread, false)
__libm_qnan_f = 0x800C97F0; // (cosf, false)
// = 0x800C9800; // (cosf, false)
// = 0x800C9870; // (xprintf, false)
// = 0x800C99E8; // (sprawdma, false)
// = 0x800C9A20; // (xldtob, false)
// = 0x800C9A90; // (rmonmem, false)
// = 0x800C9AC8; // (rmonbrk, false)
// = 0x801922E0; // (pimgr, false)
// = 0x80193AB0; // (us2dex_emu, false)
// = 0x80193AD0; // (sptask, false)
// = 0x80193B20; // (vimgr, false)
// = 0x80194D90; // (kdebugserver, false)
// = 0x80194DA0; // (readhost, false)
// = 0x80194DC0; // (log, false)
// = 0x80194DE0; // (rmonsio, false)
// = 0x80194E00; // (rmonmisc, false)
// = 0x80199010; // (rmonregs, false)
// = 0x80199030; // (rmonmain, false)
// = 0x801994B0; // (rmonbrk, false)
__osRdb_DbgRead_Buf = 0x8019C254; // size:0x4 (rmonsio, true)
__osBaseCounter = 0x801AA718; // size:0x4 (timerintr, true)
__kmc_pt_mode = 0x801AA72C; // size:0x4 (initialize, true)
__osThreadSave = 0x801AA730; // (exceptasm, false)
__osProfileOverflowBin = 0x801AA8E4; // size:0x4 (timerintr, true)
__osContPifRam = 0x801AA920; // size:0x40 (controller, true)
__osRdb_IP6_CurWrite = 0x801AA9A0; // size:0x4 (initrdb, true)
__Dom2SpeedParam = 0x801AAA08; // (initialize, false)
__osProfileList = 0x801AAA7C; // size:0x4 (timerintr, true)
__osViIntrCount = 0x801ACD08; // size:0x4 (timerintr, true)
__osRdb_Read_Data_Ct = 0x801C5D8C; // size:0x4 (readhost, true)
__osRdb_IP6_Size = 0x801C5F50; // size:0x4 (initrdb, true)
__osMaxControllers = 0x801C5FC0; // size:0x1 (controller, true)
__osCurrentTime = 0x801C5FF8; // size:0x8 (timerintr, true)
__CartRomHandle = 0x801C6008; // size:0x74 (cartrominit, true)
__osPiAccessQueue = 0x801C6190; // (pimgr, false)
__Dom1SpeedParam = 0x801C61E0; // (initialize, false)
__rmonUtilityBuffer = 0x801C6328; // size:0x100 (rmonmem, true)
rmonRdbReadBuf = 0x801C6480; // size:0x800 (rmonsio, true)
__osContLastCmd = 0x801C6C8A; // size:0x1 (controller, true)
__osEepromTimerMsg = 0x801F8D00; // size:0x4 (controller, true)
__osRdb_IP6_CurSend = 0x801F8D60; // size:0x4 (initrdb, true)
__osTimerCounter = 0x801F8D7C; // size:0x4 (timerintr, true)
__osProfileListEnd = 0x801F9B3C; // size:0x4 (timerintr, true)
__osProfTimerQ = 0x801F9B48; // size:0x18 (timerintr, true)
__osRdb_Read_Data_Buf = 0x801F9E18; // size:0x4 (readhost, true)
__osEventStateTab = 0x801FAA30; // size:0xB8 (seteventmesg, true)
__osRdb_IP6_Data = 0x801FAB18; // size:0x4 (initrdb, true)
__osEepromTimerQ = 0x801FAB40; // size:0x18 (controller, true)
__rmonRcpAtBreak = 0x801FAF80; // size:0x1 (rmonbrk, true)
__rmonMQ = 0x801FAF88; // size:0x18 (rmonmisc, true)
__osRdb_IP6_Ct = 0x801FAFA0; // size:0x4 (initrdb, true)
