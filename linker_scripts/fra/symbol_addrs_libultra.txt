osTvType = 0x80000300; // (initialize, false)
osRomBase = 0x80000308; // (pirawdma, false)
osResetType = 0x8000030C; // (initialize, false)
osAppNMIBuffer = 0x8000031C; // (initialize, false)
osSetIntMask = 0x8008FBA0; // (sched, false)
osCreatePiManager = 0x8008FC40; // size:0x234 (pimgr, true)
ramromMain = 0x8008FE74; // size:0x10C (pimgr, true)
__osEPiRawStartDma = 0x8008FF80; // size:0x3E0 (epirawdma, true)
osEPiStartDma = 0x80090480; // size:0x23C (epidma, true)
osEPiLinkHandle = 0x800906C0; // size:0x5C (epilinkhandle, true)
osCartRomInit = 0x80090720; // size:0x1F0 (cartrominit, true)
__osDevMgrMain = 0x80090910; // size:0x540 (devmgr, true)
__osPiCreateAccessQueue = 0x80090E50; // (pimgr, false)
__osPiGetAccess = 0x80090EAC; // (cartrominit, false)
__osPiRelAccess = 0x80090EFC; // (cartrominit, false)
osPiStartDma = 0x80090F40; // size:0x240 (pidma, true)
osAiGetLength = 0x80091180; // size:0x28 (aigetlen, true)
osAiGetStatus = 0x800911B0; // size:0x28 (aigetstat, true)
osAiSetFrequency = 0x800911E0; // size:0x2B0 (aisetfreq, true)
osAiSetNextBuffer = 0x80091490; // size:0x108 (aisetnextbuf, true)
_init_lpfilter = 0x800915A0; // size:0x16C (drvrnew, true)
alFxNew = 0x8009170C; // size:0x5FC (drvrnew, true)
alEnvmixerNew = 0x80091D08; // size:0x128 (drvrnew, true)
alLoadNew = 0x80091E30; // size:0xD4 (drvrnew, true)
alResampleNew = 0x80091F04; // size:0xB8 (drvrnew, true)
alAuxBusNew = 0x80091FBC; // size:0x6C (drvrnew, true)
alMainBusNew = 0x80092028; // size:0x6C (drvrnew, true)
alSaveNew = 0x80092094; // size:0x58 (drvrnew, true)
alAdpcmPull = 0x800920F0; // size:0x744 (load, true)
alRaw16Pull = 0x80092834; // size:0x6B0 (load, true)
// = 0x80092DFB; // (load, false)
alLoadParam = 0x80092EE4; // size:0x370 (load, true)
_decodeChunk = 0x80093254; // size:0x214 (load, true)
alAuxBusPull = 0x80093470; // size:0x140 (auxbus, true)
alAuxBusParam = 0x800935B0; // size:0x90 (auxbus, true)
alEnvmixerPull = 0x80093640; // size:0x87C (env, true)
// = 0x80093DE4; // (env, false)
alEnvmixerParam = 0x80093EBC; // size:0x1B4 (env, true)
_pullSubFrame = 0x80094070; // size:0x4B8 (env, true)
// = 0x8009416E; // (env, false)
// = 0x80094276; // (env, false)
// = 0x800942BB; // (env, false)
// = 0x800944C5; // (env, false)
_frexpf = 0x80094528; // size:0x160 (env, true)
_ldexpf = 0x80094688; // size:0x5C (env, true)
_getRate = 0x800946E4; // size:0x2B8 (env, true)
_getVol = 0x8009499C; // size:0x138 (env, true)
alFilterNew = 0x80094AE0; // size:0x68 (filter, true)
alMainBusPull = 0x80094B50; // size:0x1D0 (mainbus, true)
alMainBusParam = 0x80094D20; // size:0x90 (mainbus, true)
alResamplePull = 0x80094DB0; // size:0x2DC (resample, true)
alResampleParam = 0x8009508C; // size:0x188 (resample, true)
alFxPull = 0x80095220; // size:0x5A0 (reverb, true)
alFxParam = 0x800957C0; // size:0x54 (reverb, true)
alFxParamHdl = 0x80095814; // size:0x35C (reverb, true)
// = 0x8009591C; // (reverb, false)
// = 0x80095B62; // (reverb, false)
_loadOutputBuffer = 0x80095B70; // size:0x308 (reverb, true)
// = 0x80095D60; // (reverb, false)
_loadBuffer = 0x80095E78; // size:0x2A8 (reverb, true)
// = 0x80095F3D; // (reverb, false)
// = 0x80096018; // (reverb, false)
_saveBuffer = 0x80096120; // size:0x27C (reverb, true)
_filterBuffer = 0x8009639C; // size:0x124 (reverb, true)
_doModFunc = 0x800964C0; // size:0x108 (reverb, true)
alSavePull = 0x800965D0; // size:0x168 (save, true)
alSaveParam = 0x80096738; // size:0x94 (save, true)
alInit = 0x800967D0; // size:0x58 (sl, true)
alClose = 0x80096828; // size:0x48 (sl, true)
alLink = 0x80096870; // size:0x6C (sl, true)
alUnlink = 0x800968DC; // size:0x68 (sl, true)
alHeapInit = 0x80096950; // size:0x94 (heapinit, true)
alHeapDBAlloc = 0x800969F0; // size:0x168 (heapalloc, true)
alCopy = 0x80096B60; // size:0x8C (copy, true)
alSynNew = 0x80096BF0; // size:0x444 (synthesizer, true)
alAudioFrame = 0x80097034; // size:0x258 (synthesizer, true)
// = 0x8009716C; // (synthesizer, false)
// = 0x800971F3; // (synthesizer, false)
// = 0x80097283; // (synthesizer, false)
__allocParam = 0x8009728C; // size:0x6C (synthesizer, true)
__freeParam = 0x800972F8; // size:0x48 (synthesizer, true)
_collectPVoices = 0x80097340; // size:0x6C (synthesizer, true)
_freePVoice = 0x800973AC; // size:0x48 (synthesizer, true)
_timeToSamplesNoRound = 0x800973F4; // size:0x78 (synthesizer, true)
_timeToSamples = 0x8009746C; // size:0x48 (synthesizer, true)
__nextSampleTime = 0x800974B4; // size:0xF8 (synthesizer, true)
alSynDelete = 0x800975B0; // size:0x28 (syndelete, true)
alSynAddPlayer = 0x800975E0; // size:0x6C (synaddplayer, true)
alSynRemovePlayer = 0x80097650; // size:0xD8 (synremoveplayer, true)
alSynFreeVoice = 0x80097730; // size:0xFC (synfreevoice, true)
alSynAllocVoice = 0x80097830; // size:0x22C (synallocvoice, true)
// = 0x800979D1; // (synallocvoice, false)
_allocatePVoice = 0x80097A5C; // size:0x150 (synallocvoice, true)
alSynStopVoice = 0x80097BB0; // size:0xC4 (synstopvoice, true)
alSynStartVoice = 0x80097C80; // size:0xE4 (synstartvoice, true)
alSynSetPitch = 0x80097D70; // size:0xD4 (synsetpitch, true)
alSynSetVol = 0x80097E50; // size:0xF8 (synsetvol, true)
alSynSetFXMix = 0x80097F50; // size:0xF8 (synsetfxmix, true)
alSynSetPan = 0x80098050; // size:0xE0 (synsetpan, true)
alSynAllocFX = 0x80098130; // size:0x154 (synallocfx, true)
osInvalDCache = 0x80098290; // (sirawdma, false)
osWritebackDCache = 0x80098340; // (initialize, false)
osWritebackDCacheAll = 0x800983C0; // (sched, false)
osContStartQuery = 0x800983F0; // size:0x94 (contquery, true)
osContGetQuery = 0x80098484; // size:0x34 (contquery, true)
osContStartReadData = 0x800984C0; // size:0x9C (contreaddata, true)
osContGetReadData = 0x8009855C; // size:0xFC (contreaddata, true)
// = 0x800985F2; // (contreaddata, false)
__osPackReadData = 0x80098658; // size:0x134 (contreaddata, true)
osContReset = 0x80098790; // size:0x10C (contreset, true)
// = 0x80098859; // (contreset, false)
__osPackResetData = 0x8009889C; // size:0x84 (contreset, true)
osContInit = 0x80098920; // size:0x1BC (controller, true)
// = 0x80098A6D; // (controller, false)
__osContGetInitData = 0x80098ADC; // size:0x128 (controller, true)
// = 0x80098B4B; // (controller, false)
__osPackRequestData = 0x80098C04; // size:0x144 (controller, true)
osContSetCh = 0x80098D50; // size:0x80 (contsetch, true)
osVirtualToPhysical = 0x80098DD0; // size:0xDC (virtualtophysical, true)
__assert = 0x80098EB0; // size:0x48 (assert, true)
guLookAtF = 0x80098F00; // size:0x41C (lookat, true)
guLookAt = 0x8009931C; // size:0x84 (lookat, true)
guMtxF2L = 0x800993A0; // size:0x170 (mtxutil, true)
guMtxL2F = 0x80099510; // size:0x188 (mtxutil, true)
// = 0x800995DA; // (mtxutil, false)
guMtxIdentF = 0x80099698; // size:0xEC (mtxutil, true)
guMtxIdent = 0x80099784; // size:0x3C (mtxutil, true)
guPerspectiveF = 0x800997C0; // size:0x2C0 (perspective, true)
guPerspective = 0x80099A80; // size:0x6C (perspective, true)
guRotateF = 0x80099AF0; // size:0x24C (rotate, true)
guRotate = 0x80099D3C; // size:0x5C (rotate, true)
__sinf = 0x80099DA0; // size:0x2AC (sinf, true)
sinf = 0x80099DA0; // (perspective, false)
guTranslateF = 0x8009A050; // size:0x6C (translate, true)
guTranslate = 0x8009A0BC; // size:0x54 (translate, true)
guS2DInitBg = 0x8009A110; // size:0x214 (us2dex, true)
guS2DEmuSetScissor = 0x8009A330; // size:0x84 (us2dex_emu, true)
// = 0x8009A393; // (us2dex_emu, false)
tmemLoad_B = 0x8009A3B4; // size:0xFC (us2dex_emu, true)
// = 0x8009A450; // (us2dex_emu, false)
tmemLoad_A = 0x8009A4B0; // size:0xEC (us2dex_emu, true)
// = 0x8009A501; // (us2dex_emu, false)
tmemLoad = 0x8009A59C; // size:0x498 (us2dex_emu, true)
guS2DEmuBgRect1Cyc = 0x8009AA34; // size:0xD90 (us2dex_emu, true)
__osRdbSend = 0x8009B7D0; // size:0x2E4 (rdbsend, true)
osInitRdb = 0x8009BAC0; // size:0xAC (initrdb, true)
bcopy = 0x8009BB70; // (sptask, false)
bzero = 0x8009BE90; // (cartrominit, false)
strchr = 0x8009BF30; // size:0x7C (string, true)
strlen = 0x8009BFAC; // size:0x68 (string, true)
memcpy = 0x8009C014; // size:0x98 (string, true)
sprintf = 0x8009C0B0; // size:0x80 (sprintf, true)
proutSprintf = 0x8009C130; // size:0x50 (sprintf, true)
proutSyncPrintf = 0x8009C180; // size:0x90 (syncprintf, true)
// = 0x8009C1EC; // (syncprintf, false)
rmonPutchar = 0x8009C210; // size:0x88 (syncprintf, true)
kmc_proutSyncPrintf = 0x8009C298; // size:0x258 (syncprintf, true)
osSyncPrintf = 0x8009C4F0; // size:0x8C (syncprintf, true)
rmonPrintf = 0x8009C57C; // size:0x6C (syncprintf, true)
osCreateMesgQueue = 0x8009C5F0; // size:0x9C (createmesgqueue, true)
osJamMesg = 0x8009C690; // size:0x1B4 (jammesg, true)
osRecvMesg = 0x8009C850; // size:0x1A8 (recvmesg, true)
osSendMesg = 0x8009CA00; // size:0x1AC (sendmesg, true)
osSetEventMesg = 0x8009CBB0; // size:0xF4 (seteventmesg, true)
osGetCount = 0x8009CCB0; // (gettime, false)
_VirtualToPhysicalTask = 0x8009CCC0; // size:0x148 (sptask, true)
osSpTaskLoad = 0x8009CE08; // size:0x28C (sptask, true)
osSpTaskStartGo = 0x8009D094; // size:0x50 (sptask, true)
osCreateScheduler = 0x8009D0F0; // size:0x1C4 (sched, true)
osScAddClient = 0x8009D2B4; // size:0x6C (sched, true)
osScRemoveClient = 0x8009D320; // size:0xC4 (sched, true)
osScGetCmdQ = 0x8009D3E4; // size:0x30 (sched, true)
__scMain = 0x8009D414; // size:0x138 (sched, true)
// = 0x8009D435; // (sched, false)
__scHandleRetrace = 0x8009D54C; // size:0x180 (sched, true)
// = 0x8009D555; // (sched, false)
__scHandleRSP = 0x8009D6CC; // size:0x204 (sched, true)
// = 0x8009D6D8; // (sched, false)
// = 0x8009D7D1; // (sched, false)
// = 0x8009D828; // (sched, false)
__scHandleRDP = 0x8009D8D0; // size:0x14C (sched, true)
// = 0x8009D930; // (sched, false)
// = 0x8009DA17; // (sched, false)
__scTaskReady = 0x8009DA1C; // size:0x74 (sched, true)
__scTaskComplete = 0x8009DA90; // size:0x160 (sched, true)
// = 0x8009DB5B; // (sched, false)
// = 0x8009DBA9; // (sched, false)
__scAppendList = 0x8009DBF0; // size:0x134 (sched, true)
__scExec = 0x8009DD24; // size:0x1B0 (sched, true)
__scYield = 0x8009DED4; // size:0x68 (sched, true)
__scSchedule = 0x8009DF3C; // size:0x38C (sched, true)
__osSiRawStartDma = 0x8009E2D0; // size:0xF4 (sirawdma, true)
__osSiCreateAccessQueue = 0x8009E3D0; // (controller, false)
__osSiGetAccess = 0x8009E42C; // (contquery, false)
__osSiRelAccess = 0x8009E47C; // (contquery, false)
osCreateThread = 0x8009E4C0; // size:0x1C8 (createthread, true)
osDestroyThread = 0x8009E690; // size:0x120 (destroythread, true)
osGetThreadPri = 0x8009E7B0; // size:0x44 (getthreadpri, true)
osSetThreadPri = 0x8009E800; // size:0x144 (setthreadpri, true)
osStartThread = 0x8009E950; // size:0x19C (startthread, true)
osStopThread = 0x8009EAF0; // size:0xEC (stopthread, true)
__osDequeueThread = 0x8009EBE0; // size:0x60 (thread, true)
osYieldThread = 0x8009EC40; // size:0x58 (yieldthread, true)
osGetTime = 0x8009ECA0; // size:0xD8 (gettime, true)
osSetTimer = 0x8009ED80; // size:0x100 (settimer, true)
__osTimerServicesInit = 0x8009EE80; // size:0xAC (timerintr, true)
__osTimerInterrupt = 0x8009EF2C; // size:0x328 (timerintr, true)
// = 0x8009F15F; // (timerintr, false)
// = 0x8009F1BF; // (timerintr, false)
__osSetTimerIntr = 0x8009F254; // size:0x80 (timerintr, true)
__osInsertTimer = 0x8009F2D4; // size:0x1A4 (timerintr, true)
__osProbeTLB = 0x8009F480; // (virtualtophysical, false)
osViGetCurrentFramebuffer = 0x8009F540; // (sched, false)
osViGetNextFramebuffer = 0x8009F5C0; // (sched, false)
osViGetCurrentLine = 0x8009F640; // size:0x28 (vigetline, true)
osCreateViManager = 0x8009F670; // size:0x214 (vimgr, true)
viMgrMain = 0x8009F884; // size:0x208 (vimgr, true)
osViSetEvent = 0x8009FA90; // size:0xCC (visetevent, true)
osViSetMode = 0x8009FB60; // size:0xD0 (visetmode, true)
osViSetSpecialFeatures = 0x8009FC30; // size:0x288 (visetspecial, true)
osViSetYScale = 0x8009FEC0; // size:0x13C (visetyscale, true)
osViSwapBuffer = 0x800A0000; // size:0xE0 (viswapbuf, true)
__osViSwapContext = 0x800A00E0; // size:0x370 (viswapcontext, true)
osViBlack = 0x800A0450; // size:0x94 (viblack, true)
osAfterPreNMI = 0x800A0550; // size:0x38 (afterprenmi, true)
osInitialize = 0x800A0590; // size:0x4D4 (initialize, true)
// = 0x800A0944; // (initialize, false)
ptstart = 0x800A0A64; // size:0x1C (initialize, true)
createSpeedParam = 0x800A0A80; // size:0xB4 (initialize, true)
__osError = 0x800A0B40; // (aisetfreq, false)
__osDefaultHandler = 0x800A0B90; // size:0x84 (error, true)
// proutSyncPrintf = 0x800A0C20; // size:0x90 (kmcprintf, true)
// = 0x800A0C8C; // (kmcprintf, false)
// rmonPutchar = 0x800A0CB0; // size:0x88 (kmcprintf, true)
// kmc_proutSyncPrintf = 0x800A0D38; // size:0x258 (kmcprintf, true)
kmcErrorHandler = 0x800A0F90; // size:0xD0 (kmcprintf, true)
// = 0x800A1060; // (exceptasm, false)
__osExceptionPreamble = 0x800A1060; // (initialize, false)
__ptExceptionPreamble = 0x800A1070; // (initialize, false)
// = 0x800A17EF; // (exceptasm, false)
// = 0x800A1969; // (exceptasm, false)
// = 0x800A199F; // (exceptasm, false)
__osEnqueueAndYield = 0x800A1B64; // (jammesg, false)
__osEnqueueThread = 0x800A1C6C; // (setthreadpri, false)
__osPopThread = 0x800A1CB4; // (jammesg, false)
__osDispatchThread = 0x800A1CC4; // (destroythread, false)
__osCleanupThread = 0x800A1E40; // (createthread, false)
__osDisableInt = 0x800A1E50; // (cartrominit, false)
__osRestoreInt = 0x800A1EC0; // (cartrominit, false)
__osSetGlobalIntMask = 0x800A1EE0; // size:0x58 (setglobalintmask, true)
__osResetGlobalIntMask = 0x800A1F40; // size:0x64 (resetglobalintmask, true)
__osPiRawStartDma = 0x800A1FB0; // size:0x1DC (pirawdma, true)
osPiGetCmdQueue = 0x800A2190; // size:0x48 (pigetcmdq, true)
__osEPiRawReadIo = 0x800A21E0; // size:0x2D4 (epirawread, true)
__osEPiRawWriteIo = 0x800A24C0; // size:0x2A4 (epirawwrite, true)
__osAiDeviceBusy = 0x800A2770; // size:0x4C (ai, true)
osInvalICache = 0x800A27C0; // (initialize, false)
string_to_u32 = 0x800A2840; // size:0x88 (kdebugserver, true)
// = 0x800A28A6; // (kdebugserver, false)
send_packet = 0x800A28C8; // size:0xC4 (kdebugserver, true)
// = 0x800A2939; // (kdebugserver, false)
clear_IP6 = 0x800A298C; // size:0x78 (kdebugserver, true)
// = 0x800A2993; // (kdebugserver, false)
send = 0x800A2A04; // size:0xF0 (kdebugserver, true)
kdebugserver = 0x800A2AF4; // size:0x11C (kdebugserver, true)
sqrtf = 0x800A2C10; // (lookat, false)
__cosf = 0x800A2C20; // size:0x238 (cosf, true)
cosf = 0x800A2C20; // (perspective, false)
guNormalize = 0x800A2E60; // size:0xD8 (normalize, true)
osReadHost = 0x800A2F40; // size:0xE0 (readhost, true)
_Printf = 0x800A3020; // size:0x910 (xprintf, true)
// = 0x800A36EC; // (xprintf, false)
_Putfld = 0x800A3930; // size:0x8E4 (xprintf, true)
osCreateLog = 0x800A4220; // size:0x6C (log, true)
osLogEvent = 0x800A428C; // size:0x8C (log, true)
osFlushLog = 0x800A4318; // size:0x218 (log, true)
// = 0x800A446C; // (log, false)
__osLogWrite = 0x800A4530; // size:0x1FC (log, true)
osDpSetNextBuffer = 0x800A4730; // size:0x130 (dpsetnextbuf, true)
__osGetCause = 0x800A4860; // (initialize, false)
__osGetSR = 0x800A4870; // (initialize, false)
__osSetCompare = 0x800A4880; // (timerintr, false)
__osSetFpcCsr = 0x800A4890; // (initialize, false)
__osSetSR = 0x800A48A0; // (initialize, false)
__rmonSendFault = 0x800A48B0; // size:0x88 (rmonsio, true)
__rmonIOflush = 0x800A4938; // size:0x60 (rmonsio, true)
__rmonIOputw = 0x800A4998; // size:0x84 (rmonsio, true)
__rmonIOhandler = 0x800A4A1C; // size:0xE4 (rmonsio, true)
__osSpDeviceBusy = 0x800A4B00; // size:0x48 (sp, true)
__osSpSetStatus = 0x800A4B50; // size:0x2C (spsetstat, true)
__osSpSetPc = 0x800A4B80; // size:0x50 (spsetpc, true)
__osSpRawStartDma = 0x800A4BD0; // size:0x130 (sprawdma, true)
osSpTaskYield = 0x800A4D00; // size:0x2C (sptaskyield, true)
osSpTaskYielded = 0x800A4D30; // size:0x88 (sptaskyielded, true)
__osSiRawReadIo = 0x800A4DC0; // (initialize, false)
__osSiRawWriteIo = 0x800A4E80; // (initialize, false)
osMapTLBRdb = 0x800A4F10; // (initialize, false)
osUnmapTLBAll = 0x800A4F70; // (initialize, false)
__osViInit = 0x800A4FC0; // size:0x158 (vi, true)
__osViGetCurrentContext = 0x800A5120; // (vimgr, false)
_Litob = 0x800A5150; // size:0x3B0 (xlitob, true)
_Ldtob = 0x800A5500; // size:0x708 (xldtob, true)
// = 0x800A5A46; // (xldtob, false)
// = 0x800A5B3C; // (xldtob, false)
_Ldunscale = 0x800A5C08; // size:0x148 (xldtob, true)
_Genld = 0x800A5D50; // size:0x924 (xldtob, true)
__osDpDeviceBusy = 0x800A6680; // size:0x48 (dp, true)
NotImplemented = 0x800A66D0; // size:0x28 (rmoncmds, true)
__rmonExecute = 0x800A66F8; // size:0xAC (rmoncmds, true)
__rmonWriteWordTo = 0x800A67B0; // size:0x50 (rmonmem, true)
// = 0x800A67EC; // (rmonmem, false)
__rmonReadWordAt = 0x800A6800; // size:0x74 (rmonmem, true)
// = 0x800A6843; // (rmonmem, false)
__rmonMemcpy = 0x800A6874; // size:0x64 (rmonmem, true)
__rmonCopyWords = 0x800A68D8; // size:0x64 (rmonmem, true)
// = 0x800A68D9; // (rmonmem, false)
strcpy = 0x800A693C; // size:0x60 (rmonmem, true)
__rmonReadMem = 0x800A699C; // size:0x22C (rmonmem, true)
__rmonWriteMem = 0x800A6BC8; // size:0x258 (rmonmem, true)
__rmonListProcesses = 0x800A6E20; // size:0x8C (rmonmem, true)
__rmonLoadProgram = 0x800A6EAC; // size:0x28 (rmonmem, true)
__rmonGetExeName = 0x800A6ED4; // size:0xC8 (rmonmem, true)
__rmonGetRegionCount = 0x800A6F9C; // size:0x8C (rmonmem, true)
__rmonGetRegions = 0x800A7028; // size:0x1F8 (rmonmem, true)
__rmonSetFault = 0x800A7220; // size:0x68 (rmonmisc, true)
__rmonInit = 0x800A7288; // size:0xE4 (rmonmisc, true)
__rmonPanic = 0x800A736C; // size:0x28 (rmonmisc, true)
__rmonSetComm = 0x800A7394; // size:0x54 (rmonmisc, true)
LoadStoreSU = 0x800A73F0; // size:0x90 (rmonregs, true)
// = 0x800A745C; // (rmonregs, false)
LoadStoreVU = 0x800A7480; // size:0xA8 (rmonregs, true)
// = 0x800A74DA; // (rmonregs, false)
SetUpForRCPop = 0x800A7528; // size:0xA4 (rmonregs, true)
// = 0x800A7555; // (rmonregs, false)
CleanupFromRCPop = 0x800A75CC; // size:0xA4 (rmonregs, true)
__rmonGetGRegisters = 0x800A7670; // size:0x180 (rmonregs, true)
__rmonSetGRegisters = 0x800A77F0; // size:0x184 (rmonregs, true)
// = 0x800A7939; // (rmonregs, false)
__rmonGetFRegisters = 0x800A7974; // size:0xC4 (rmonregs, true)
__rmonSetFRegisters = 0x800A7A38; // size:0xC4 (rmonregs, true)
rmonGetRcpRegister = 0x800A7AFC; // size:0x74 (rmonregs, true)
__rmonGetSRegs = 0x800A7B70; // size:0x164 (rmonregs, true)
__rmonSetSRegs = 0x800A7CD4; // size:0x12C (rmonregs, true)
__rmonGetVRegs = 0x800A7E00; // size:0x13C (rmonregs, true)
__rmonSetVRegs = 0x800A7F3C; // size:0xE0 (rmonregs, true)
__rmonGetRegisterContents = 0x800A801C; // size:0x10C (rmonregs, true)
__rmonMaskIdleThreadInts = 0x800A8130; // size:0x84 (rmontask, true)
__rmonGetTCB = 0x800A81B4; // size:0x90 (rmontask, true)
// = 0x800A81FF; // (rmontask, false)
__rmonStopUserThreads = 0x800A8244; // size:0x140 (rmontask, true)
__rmonListThreads = 0x800A8384; // size:0x160 (rmontask, true)
// = 0x800A83F7; // (rmontask, false)
__rmonGetThreadStatus = 0x800A84E4; // size:0x310 (rmontask, true)
__rmonThreadStatus = 0x800A87F4; // size:0x88 (rmontask, true)
__rmonStopThread = 0x800A887C; // size:0x178 (rmontask, true)
__rmonRunThread = 0x800A89F4; // size:0x2D4 (rmontask, true)
__rmonSendHeader = 0x800A8CD0; // size:0xA8 (rmonmain, true)
__rmonSendReply = 0x800A8D78; // size:0xB0 (rmonmain, true)
__rmonSendData = 0x800A8E28; // size:0x158 (rmonmain, true)
rmonMain = 0x800A8F80; // size:0x194 (rmonmain, true)
__osSpGetStatus = 0x800A9120; // size:0x28 (spgetstat, true)
__osSpRawReadIo = 0x800A9150; // (rmonmain, false)
__osSpRawWriteIo = 0x800A9210; // (rmonmem, false)
__osSiDeviceBusy = 0x800A92A0; // size:0x48 (si, true)
__osGetActiveQueue = 0x800A92F0; // (rmonbrk, false)
ldiv = 0x800A9320; // size:0xCC (ldiv, true)
lldiv = 0x800A93EC; // size:0x190 (ldiv, true)
__rmonRCPrunning = 0x800A9580; // (rmonregs, false)
__rmonIdleRCP = 0x800A95A4; // (rmontask, false)
__rmonStepRCP = 0x800A95E8; // (rmonregs, false)
__rmonRunRCP = 0x800A95FC; // (rmontask, false)
SetTempBreakpoint = 0x800A9620; // size:0xC4 (rmonbrk, true)
// = 0x800A96B3; // (rmonbrk, false)
ClearTempBreakpoint = 0x800A96E4; // size:0x114 (rmonbrk, true)
__rmonSetBreak = 0x800A97F8; // size:0x200 (rmonbrk, true)
__rmonListBreak = 0x800A99F8; // size:0x28 (rmonbrk, true)
__rmonClearBreak = 0x800A9A20; // size:0x180 (rmonbrk, true)
// = 0x800A9A40; // (rmonbrk, false)
__rmonGetBranchTarget = 0x800A9BA0; // size:0x294 (rmonbrk, true)
// = 0x800A9C2F; // (rmonbrk, false)
// = 0x800A9D79; // (rmonbrk, false)
// = 0x800A9DD9; // (rmonbrk, false)
IsJump = 0x800A9E34; // size:0xCC (rmonbrk, true)
__rmonSetSingleStep = 0x800A9F00; // size:0xEC (rmonbrk, true)
// = 0x800A9F11; // (rmonbrk, false)
__rmonGetExceptionStatus = 0x800A9FEC; // size:0x80 (rmonbrk, true)
rmonSendBreakMessage = 0x800AA06C; // size:0xC0 (rmonbrk, true)
__rmonHitBreak = 0x800AA12C; // size:0x38 (rmonbrk, true)
__rmonHitSpBreak = 0x800AA164; // size:0x70 (rmonbrk, true)
__rmonHitCpuFault = 0x800AA1D4; // size:0x38 (rmonbrk, true)
rmonFindFaultedThreads = 0x800AA20C; // size:0xFC (rmonbrk, true)
__divdi3 = 0x800AE3C0; // (ldiv, false)
__udivdi3 = 0x800AE530; // (initialize, false)
__umoddi3 = 0x800AE550; // (xlitob, false)
__osPiDevMgr = 0x800BD3B0; // (epidma, false)
// = 0x800BD3B0; // (pimgr, false)
__osPiTable = 0x800BD3CC; // (cartrominit, false)
__osCurrentHandle = 0x800BD3D0; // (epirawdma, false)
// = 0x800BD3E0; // (cartrominit, false)
__osPiAccessQueueEnabled = 0x800BD3F0; // (pimgr, false)
// = 0x800BD400; // (aisetnextbuf, false)
// = 0x800BD410; // (drvrnew, false)
// = 0x800BD5A0; // (env, false)
// alGlobals = 0x800BD6C0; // (env, false)
// = 0x800BD6C0; // (sl, false)
// alGlobals = 0x800BD6C0; // (synthesizer, false)
// = 0x800BD6D0; // (controller, false)
// = 0x800BD6E0; // (rotate, false)
// = 0x800BD6F0; // (us2dex_emu, false)
__osRdb_IP6_Empty = 0x800BD720; // (exceptasm, false)
// = 0x800BD720; // (rdbsend, false)
// = 0x800BD730; // (syncprintf, false)
// = 0x800BD740; // (seteventmesg, false)
// = 0x800BD750; // (sched, false)
__osThreadTail = 0x800BD770; // (createmesgqueue, false)
__osRunQueue = 0x800BD778; // (exceptasm, false)
__osActiveQueue = 0x800BD77C; // (createthread, false)
__osRunningThread = 0x800BD780; // (destroythread, false)
__osFaultedThread = 0x800BD784; // (exceptasm, false)
__osTimerList = 0x800BD790; // (settimer, false)
// = 0x800BD790; // (timerintr, false)
// __osViDevMgr = 0x800BD7A0; // (gettime, false)
// = 0x800BD7A0; // (vimgr, false)
// __osViDevMgr = 0x800BD7A0; // (visetevent, false)
__additional_scanline = 0x800BD7BC; // (viswapcontext, false)
osViModeTable = 0x800BD7C0; // (sched, false)
osViModeNtscLan1 = 0x800BE9E0; // (vi, false)
osViModePalLan1 = 0x800BEE40; // (vi, false)
osViModeMpalLan1 = 0x800BF2A0; // (vi, false)
// = 0x800BFAC0; // (initialize, false)
osViClock = 0x800BFAC8; // (aisetfreq, false)
__osShutdown = 0x800BFACC; // (exceptasm, false)
__OSGlobalIntMask = 0x800BFAD0; // (exceptasm, false)
// = 0x800BFAE0; // (error, false)
__osErrorHandler = 0x800BFAF4; // (errorasm, false)
// = 0x800BFB00; // (kmcprintf, false)
__kmcErrorHandler = 0x800BFD38; // (errorasm, false)
// = 0x800BFD40; // (exceptasm, false)
// = 0x800BFD80; // (kdebugserver, false)
// = 0x800BFD90; // (readhost, false)
// = 0x800BFDA0; // (xprintf, false)
// = 0x800BFDF0; // (log, false)
// = 0x800BFE00; // (vi, false)
__osViCurr = 0x800BFE60; // (viswapcontext, false)
__osViNext = 0x800BFE64; // (viblack, false)
// = 0x800BFE70; // (xlitob, false)
// = 0x800BFEA0; // (rmoncmds, false)
// = 0x800BFF80; // (rmonmain, false)
__osRcpImTable = 0x800C6200; // (exceptasm, false)
// = 0x800C6200; // (setintmask, false)
// = 0x800C6280; // (devmgr, false)
// = 0x800C62A0; // (aisetfreq, false)
// = 0x800C62B0; // (drvrnew, false)
// = 0x800C6300; // (env, false)
// = 0x800C6400; // (resample, false)
// = 0x800C6430; // (reverb, false)
// = 0x800C6490; // (save, false)
// = 0x800C649C; // (heapalloc, false)
// = 0x800C64B0; // (synthesizer, false)
// = 0x800C64E0; // (assert, false)
// = 0x800C6500; // (lookat, false)
// = 0x800C6520; // (perspective, false)
// = 0x800C6540; // (sinf, false)
// = 0x800C65A0; // (sched, false)
// = 0x800C65D0; // (sirawdma, false)
// = 0x800C65E0; // (visetevent, false)
// = 0x800C65F4; // (visetmode, false)
// = 0x800C6604; // (viswapbuf, false)
// = 0x800C6620; // (viswapcontext, false)
// = 0x800C6630; // (kmcprintf, false)
// = 0x800C7DC0; // (exceptasm, false)
// = 0x800C7E30; // (epirawread, false)
__libm_qnan_f = 0x800C7E50; // (cosf, false)
// = 0x800C7E60; // (cosf, false)
// = 0x800C7ED0; // (xprintf, false)
// = 0x800C8048; // (sprawdma, false)
// = 0x800C8080; // (xldtob, false)
// = 0x800C80F0; // (rmonmem, false)
// = 0x800C8128; // (rmonbrk, false)
// = 0x80190940; // (pimgr, false)
// = 0x80192110; // (us2dex_emu, false)
// = 0x80192130; // (sptask, false)
// = 0x80192180; // (vimgr, false)
// = 0x801933F0; // (kdebugserver, false)
// = 0x80193400; // (readhost, false)
// = 0x80193420; // (log, false)
// = 0x80193440; // (rmonsio, false)
// = 0x80193460; // (rmonmisc, false)
// = 0x80197670; // (rmonregs, false)
// = 0x80197690; // (rmonmain, false)
// = 0x80197B10; // (rmonbrk, false)
__osRdb_DbgRead_Buf = 0x8019A8B4; // size:0x4 (rmonsio, true)
__osBaseCounter = 0x801A8D78; // size:0x4 (timerintr, true)
__kmc_pt_mode = 0x801A8D8C; // size:0x4 (initialize, true)
__osThreadSave = 0x801A8D90; // (exceptasm, false)
__osProfileOverflowBin = 0x801A8F44; // size:0x4 (timerintr, true)
__osContPifRam = 0x801A8F80; // size:0x40 (controller, true)
__osRdb_IP6_CurWrite = 0x801A9000; // size:0x4 (initrdb, true)
__Dom2SpeedParam = 0x801A9068; // (initialize, false)
__osProfileList = 0x801A90DC; // size:0x4 (timerintr, true)
__osViIntrCount = 0x801AB368; // size:0x4 (timerintr, true)
__osRdb_Read_Data_Ct = 0x801C43EC; // size:0x4 (readhost, true)
__osRdb_IP6_Size = 0x801C45B0; // size:0x4 (initrdb, true)
__osMaxControllers = 0x801C4620; // size:0x1 (controller, true)
__osCurrentTime = 0x801C4658; // size:0x8 (timerintr, true)
__CartRomHandle = 0x801C4668; // size:0x74 (cartrominit, true)
__osPiAccessQueue = 0x801C47F0; // (pimgr, false)
__Dom1SpeedParam = 0x801C4840; // (initialize, false)
__rmonUtilityBuffer = 0x801C4988; // size:0x100 (rmonmem, true)
rmonRdbReadBuf = 0x801C4AE0; // size:0x800 (rmonsio, true)
__osContLastCmd = 0x801C52EA; // size:0x1 (controller, true)
__osEepromTimerMsg = 0x801F7360; // size:0x4 (controller, true)
__osRdb_IP6_CurSend = 0x801F73C0; // size:0x4 (initrdb, true)
__osTimerCounter = 0x801F73DC; // size:0x4 (timerintr, true)
__osProfileListEnd = 0x801F819C; // size:0x4 (timerintr, true)
__osProfTimerQ = 0x801F81A8; // size:0x18 (timerintr, true)
__osRdb_Read_Data_Buf = 0x801F8478; // size:0x4 (readhost, true)
__osEventStateTab = 0x801F9090; // size:0xB8 (seteventmesg, true)
__osRdb_IP6_Data = 0x801F9178; // size:0x4 (initrdb, true)
__osEepromTimerQ = 0x801F91A0; // size:0x18 (controller, true)
__rmonRcpAtBreak = 0x801F95E0; // size:0x1 (rmonbrk, true)
__rmonMQ = 0x801F95E8; // size:0x18 (rmonmisc, true)
__osRdb_IP6_Ct = 0x801F9600; // size:0x4 (initrdb, true)
